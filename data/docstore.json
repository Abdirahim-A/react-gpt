{
  "0": {
    "pageContent": "---\nsidebar_position: 500\nsidebar_class_name: hide-from-sidebar\n---\n\n# Glossary\n\nLearn about terms and references commonly used in the documentation.\n\n### Argument\n\nAn argument is a variable that affects a function's result.\n\n### Binary operator\n\nA binary operator is an operator that operates on two operands and manipulates them to return a result.\n\n### Boolean\n\nA Boolean is a data type with two possible values: `true` or `false`.\n\n### Calculations block\n\nThe calculations block is the place where you can type numbers and perform operations in a more natural way, powered by the Decipad language. In the calculations block, you can type numbers, units, variables, functions, as well as create tables.\n\n```deci live\n2 + 2\n==> 4\n```\n\n### Condition\n\nA conditional statement or conditional is an if-then-else statement.\n\n```deci live\nsun_is_down = false\nif sun_is_down then \"dinner👩‍🍳\" else \"lunch💪\"\n==> 'lunch💪'\n```\n\n### Decipad language\n\nThe language is how you interact and use data in a calculations block.",
    "metadata": { "source": "docs/Glossary.md" }
  },
  "1": {
    "pageContent": "```deci live\nsun_is_down = false\nif sun_is_down then \"dinner👩‍🍳\" else \"lunch💪\"\n==> 'lunch💪'\n```\n\n### Decipad language\n\nThe language is how you interact and use data in a calculations block.\n\n```deci live\nCurrentSavings = 50000\n==> 50000\n```\n\n### Dimension\n\nA dimension is a category that can be broken down into different items.\n\n### Exponentiation\n\nExponentiation is the mathematical operation of raising a quantity to a power.\n\n```deci live\n(3 meters) ** 2\n==> 9 meters²\n```\n\n### Expression\n\nAn expression is a combination of numbers, variables, functions such as `+`, `-`, `*`, etc.\n\n```deci live\n6 / 2\n==> 3\n```\n\n### Function\n\nA function is a block of reusable Decipad language used to perform a set of operations.\n\n```deci live\nmax([1, 3, 2])\nrounddown(2.9)\n==> 2\n```\n\n### Integer\n\nAn integer is a whole number, not a fractional number, that can be positive, negative or 0.\n\n```deci live\n21\n-21\n0\n==> 0\n```\n\n### Lookup",
    "metadata": { "source": "docs/Glossary.md" }
  },
  "2": {
    "pageContent": "```deci live\nmax([1, 3, 2])\nrounddown(2.9)\n==> 2\n```\n\n### Integer\n\nAn integer is a whole number, not a fractional number, that can be positive, negative or 0.\n\n```deci live\n21\n-21\n0\n==> 0\n```\n\n### Lookup\n\nLookup is a pre-built function that can be used to access values in a table to be used in further calculations.\n\n```deci live\nEmployees = {\n  name = [\"Jane\", \"Peter\", \"John\"]\n  Office = [\"USA\", \"Germany\", \"Japan\"]\n}\n\nlookup(Employees, \"Peter\")\n==> {\n  name = 'Peter',\n  Office = 'Germany'\n}\n```\n\n### Notebook\n\nA notebook is a place where narrative and data coexist.\n\n## Operand\n\nAn operand is a number or quantity upon which a mathematical operation is performed.\n\n## Operator\n\nAn operator is a symbol used to perform a mathematical operation.\n\n```deci live\n5 - 7\n8 + 6\n10 / 2\n12 * 5\n==> 60\n```\n\n## String\n\nA string is a data type used to represent text.\n\n## Text block\n\nA text block is a paragraph of text with different text styling options.\n\n## Unit",
    "metadata": { "source": "docs/Glossary.md" }
  },
  "3": {
    "pageContent": "```deci live\n5 - 7\n8 + 6\n10 / 2\n12 * 5\n==> 60\n```\n\n## String\n\nA string is a data type used to represent text.\n\n## Text block\n\nA text block is a paragraph of text with different text styling options.\n\n## Unit\n\nA unit is any type of measurement. The Decipad language understands some units and knows how to convert between units of that same quantity. Units can be simple and composed.\n\n```deci live\n2 apples\n50 miles/hour\n==> 50 miles per hour\n```\n\n## Variable\n\nA variable is a way to store a value in a name, which can then be used in further calculations. Declaring a variable is assigning it a value using the `=` operator.\n\n```deci live\nTotal_Revenue = 50000 USD\nTotal_Costs = 23000 USD\nYearly_Profit = Total_Revenue - Total_Costs\n==> 27000 $\n```\n\n## Widgets\n\nWidgets are no code blocks you can place on your notebooks. Everyone with access will be able to update them and check how it affects the model.",
    "metadata": { "source": "docs/Glossary.md" }
  },
  "4": {
    "pageContent": "---\nsidebar_position: 350\nsidebar_class_name: hide-from-sidebar\nhide_table_of_contents: true\n---\n\n# Playground\n\nHere you can freely try the Decipad:\n\n```deci live\nSalary = 2000€\nRent = 500€\nFoodAndStuff = 400€\nSavings = Salary - Rent - FoodAndStuff\n==> 1100 €\n```\n\nMaybe calculate how much you weight in bananas?\n\n```deci live\nYou = 50kg\nBanana = 118g\n\nround(You in Banana)\n==> 424 Bananas\n```",
    "metadata": { "source": "docs/playground.md" }
  },
  "5": {
    "pageContent": "---\nsidebar_position: 320\n---\n\n# Define a Decision Table\n\n## Match\n\nSometimes you might want to test a group of conditions and return a value when a true statement is found. You can do this using the `match{}` keyword. Sounds complicated?\n\n**Let's explore some practical examples!**\n\nHere you can see how you can determine a salary bonus based on performace. The current `Bonus` is `0.02` because the value for `Performance` matches (in other words, is) `Exceeds`. If the value for `Performance` was \"Meets\" the `Bonus` would be `0`.\n\n```deci live\nPerformance = \"Exceeds\"\n\nBonus = match {\n  Performance == \"Meets\": 0%\n  Performance == \"Exceeds\": 2%\n  Performance == \"Greatly exceeds\": 3%\n}\n==> 2%\n```\n\n**A more complex example:**\n\nYou can also combine decision tables with [a custom formula](/docs/formulas/#custom-formulas) to make them easy to reuse. Let's for example define a formula to match scores of students to their grades:",
    "metadata": { "source": "docs/advanced-concepts/decision-tables.md" }
  },
  "6": {
    "pageContent": "```deci live\ngrade(g) = match {\n  g >= 90%: \"A\"\n  g >= 80%: \"B\"\n  g >= 70%: \"C\"\n  g >= 60%: \"D\"\n  g >= 0: \"F\"\n}\n\ngrade(75%)\n==> 'C'\n```\n\n![image](https://user-images.githubusercontent.com/12210180/179830955-73f656c1-86b6-4e6f-9b7c-795aaf78c752.png)\n\nHere we are defining [a custom formula](/docs/formulas/#custom-formulas) called `grade(g)` that we then use on a table. Can you see how the `Grades` column is automatically filling the correct score for each student? How cool is that?\n\n## Tiers & Slices\n\nThere are a lot of instances when you need to use a formula on a number until a certain threshold, and other formulas as that number grows.\n\nFor examples:\n\n- Performance gates in a tiered sales commission structure. When someone sells within a certain range, they may earn a higher percentage of commission.\n- A progressive tax system where each tax bracket is taxed at a different rate.\n\n### Tiers\n\nTo make these easier to work on Decipad, we've created a special syntax!",
    "metadata": { "source": "docs/advanced-concepts/decision-tables.md" }
  },
  "7": {
    "pageContent": "### Tiers\n\nTo make these easier to work on Decipad, we've created a special syntax!\n\nIts called `tiers` and it slices a number into different levels of tiers, so you can perform calculations using formulas on each tier. At the end, the results are added up for you.\n\nHere's an example for a sales comission scenario.\n\n```deci live\nYourSales = $120 000\n\ntiers YourSales  {\n   $50 000 : tier * 5%\n  $100 000 : tier * 7%\n  $150 000 : tier * 10%\n  rest     : tier * 15%\n  max      : $500 000\n  min      : $5 000\n}\n==> 8000 $\n```\n\nAs `YourSales` crosses the `$100,000` mark, the sales comission goes from `5%` to `7%`.\n\n### Tiers Syntax\n\nLet's unpack the syntax.\n\n- The Tier syntax looks a lot like the table syntax, but you will need to specify `<YourNumber>` for evaluation.\n\n- Inside `{}` and before `:`, you can specify each tier threshold.\n\n- After `:` you can specify the formula for each level.\n\n- When defining the formulas, you may use the keyword `tier` to reference `<YourNumber>` on that tier.",
    "metadata": { "source": "docs/advanced-concepts/decision-tables.md" }
  },
  "8": {
    "pageContent": "- After `:` you can specify the formula for each level.\n\n- When defining the formulas, you may use the keyword `tier` to reference `<YourNumber>` on that tier.\n\n**Take a look at this conceptual example:**\n\n```\ntiers <YourNumber> {\n  1st tier : Formula for 1st tier\n  2nd tier : Formula for 2nd tier\n  nth tier : Formula for nth tier\n  rest: Formula for scenarios greater than the nth tier\n}\n```\n\nOptionally, you can specify a maximum and minimum value for your tier system. No matter how big or small your result may be, your tier system will always return between these boundaries.\n\n**Check this conceptual example:**\n\n```\ntiers <YourNumber> {\n  1st tier : Formula for 1st tier\n  2nd tier : Formula for 2nd tier\n  nth tier : Formula for nth tier\n  max: Maximum value\n  min: Minimum value\n  rest: Formula for scenarios greater than the nth tier\n}\n```\n\nOptionally you can use `slices` and `slice` instead of `tiers` and `tier`.\n\n### Tier Examples\n\nTake a look at this example where we calculate income taxes in the UK.",
    "metadata": { "source": "docs/advanced-concepts/decision-tables.md" }
  },
  "9": {
    "pageContent": "Optionally you can use `slices` and `slice` instead of `tiers` and `tier`.\n\n### Tier Examples\n\nTake a look at this example where we calculate income taxes in the UK.\n\nThis is the current Income Tax Table in the UK:\n\n| Income                       | Income Tax Band |\n| ---------------------------- | --------------- |\n| Up to £12,570                | 0%              |\n| Between £12,571 and £50,270  | 20%             |\n| Between £50,271 and £150,000 | 40%             |\n| Over £150,000                | 45%             |\n\nHere is how you build it on Decipad:\n\n```deci live\nMyIncome = £52000\n\nIncomeTaxes(Income) = slices Income {\n   £12570  : slice * 0%\n   £50271  : slice * 20%\n  £150000  : slice * 40%\n   rest    : slice * 45%\n}\n\nIncomeTaxes(MyIncome)\n==> 8231.8 £\n```\n\nOn this example, we've combined tiers/slices and a formula definition to make it easier to reuse later. In this case, it allows you to use `ÌncomeTaxes()` each time you want to know how much someone will pay in income tax in the UK.",
    "metadata": { "source": "docs/advanced-concepts/decision-tables.md" }
  },
  "10": {
    "pageContent": "For this partical situation, since `MyIncome`is `£52,000` my taxes are going to be `£8,231.8`.\n\n| Income                       | Income Tax Band | Tax paid                                  |\n| ---------------------------- | --------------- | ----------------------------------------- |\n| Up to £12,570                | 0%              | No income tax on the first £12,570        |\n| Between £12,571 and £50,270  | 20%             | 20% income tax on you next £37,500 income |\n| Between £50,271 and £150,000 | 40%             | 40% on the final £1,730 of income         |\n| Over £150,000                | 45%             | No income tax paid at his rate            |\n\n**Let's see another example:**\n\n```deci live\nMyIncome = £85000\n\nIncomeTaxes(Income) = slices Income {\n   £12570  : slice * 0%\n   £50271  : slice * 20%\n  £150000  : slice * 40%\n   rest    : slice * 45%\n}\n\nIncomeTaxes(MyIncome)\n==> 21431.8 £\n```",
    "metadata": { "source": "docs/advanced-concepts/decision-tables.md" }
  },
  "11": {
    "pageContent": "IncomeTaxes(Income) = slices Income {\n   £12570  : slice * 0%\n   £50271  : slice * 20%\n  £150000  : slice * 40%\n   rest    : slice * 45%\n}\n\nIncomeTaxes(MyIncome)\n==> 21431.8 £\n```\n\nHere `MyIncome`is `£85,000`instead of `£52,000` and my taxes are going to be `£21,431.8` instead of `£8,231.8`.\n\nTo make these calculations easier, you can also use a table:\n\n![image](https://user-images.githubusercontent.com/12210180/181501145-d4bd8ebd-8e9e-4257-9ab7-81514779a797.png)\n\n---\n\nGive it a try! How do you see yourself using tiers on your notebook?",
    "metadata": { "source": "docs/advanced-concepts/decision-tables.md" }
  },
  "12": {
    "pageContent": "---\nsidebar_position: 440\n---\n\n# Join Tables\n\nThe `concatenate()` formula lets you combine two or more tables.\n\n**Syntax:** `concatenate( FirstTable, SecondTable )`\n\n### 1. Check if your tables are compatible\n\nTo join two tables, **make sure both tables have the same column names and types**. The data in each table can be different.\n\nHere is an example of two tables you can join.\n\n![Join Tables Correct](./img/JoinTablesCorrect.png)\n\nHere is an example of tables you can't join, since the column names and data types in both tables are different.\n\n![Join Tables Wrong](./img/JoinTablesWrong.png)\n\nNotice how the first column of `Table1` is a number column called `Column1` and the first column of `Table2` is a currency column called `Column3`. All columns should be the same in order to join `Table1` and `Table2`.\n\n### 2. Add a Decipad Code Block\n\nTo use formulas, you will need a `Decipad Code Block`.",
    "metadata": { "source": "docs/advanced-concepts/join-tables.md" }
  },
  "13": {
    "pageContent": "### 2. Add a Decipad Code Block\n\nTo use formulas, you will need a `Decipad Code Block`.\n\nAdd a **Decipad Code Block** from the block menu by typing `/calc` on an empty line or by pressing `+` and selecting `Calculations` from the menu.\n\n![Add Calculation Block](./img/AddCalculationBlock.png)\n\n### 3. Join two tables\n\nUse the `concatenate()` formula with both tables' names as arguments to join the two compatible tables. Notice how you can create a new table with the result.\n\n![Join Tables Correct](./img/JoinTablesConcatenate.png)\n\n## 4. Join multiple tables\n\nEasily combine more than 2 tables by chaining the `concatenate()` formula.\n\n![Join Tables Correct](./img/JoinTablesConcatenateTree.png)\n\nThe `concatenate(Table1, Table2)` formula results on a table that you can reuse to join a third one.",
    "metadata": { "source": "docs/advanced-concepts/join-tables.md" }
  },
  "14": {
    "pageContent": "---\nsidebar_position: 7\nsidebar_class_name: new\n---\n\n# Share your Notebooks\n\n![Invites](./img/image_collab.png)\n\n**Invite teammates to collaborate** on your notebooks by following these steps:\n\n1. Click the + button on the top bar of your notebook.\n2. Select a role for the person you want to invite.\n3. Add their email address.\n\nNotebook access roles:\n\n- `Collaborator`: can make changes to your notebook.\n- `Reader`: has access to read your notebook and duplicate it to make a copy.\n\n## Change Access Permissions\n\n**To change access permissions on your notebook**, follow these steps:\n\n1. Click the `+` button near your avatar on the top bar of your notebook.\n2. Use the role dropdown to update the permissions.\n\n## Remove Access to Your Notebook\n\n**To remove access to your notebook**, follow these steps:\n\n1. Click the `+` button near your avatar on the top bar of your notebook.\n2. Press the role dropdown and choose `Remove`.",
    "metadata": { "source": "docs/quick-start/collaborate.md" }
  },
  "15": {
    "pageContent": "**To remove access to your notebook**, follow these steps:\n\n1. Click the `+` button near your avatar on the top bar of your notebook.\n2. Press the role dropdown and choose `Remove`.\n\n**Note**: If your notebook has been published, users with the link will still be able to access your notebook as a reader. [Learn more about publishing Notebooks →](/docs/quick-start/publish)\n\n## Find Notebooks You Have Access To\n\n**To find notebooks shared with you**, go to your workspace and select `Shared with me` on the left **Alternatively**, you can click the link we send to your email each time someone shares a notebook with you.\n\n<br/>\n\n---\n\n# Continue Exploring:\n\n- Check out our gallery of [Templates](/docs/gallery)\n- [Publish your Notebooks](/docs/quick-start/publish)\n- [Hide notebook blocks from readers](/docs/quick-start/blocks#hide-a-block-from-a-reader)\n- [Add widgets readers can explore](/docs/quick-start/widgets#create-a-new-widget)",
    "metadata": { "source": "docs/quick-start/collaborate.md" }
  },
  "16": {
    "pageContent": "---\nsidebar_position: 8\ntoc_min_heading_level: 2\n---\n\n# Create a Table\n\nTables help you organize your numbers.\n\n## Learn Decipad tables in 3 minutes\n\n<div style={{position: 'relative', paddingBottom: '59.01639344262295%', height: 0}}>\n  <iframe src=\"https://www.loom.com/embed/cb7d3e18401d4f289ea7e7c9eeaf08d9\" frameBorder={0} webkitallowfullscreen mozallowfullscreen allowFullScreen style={{position: 'absolute', top: 0, left: 0, width: '100%', height: '100%'}} />\n</div>\n\n## Create a new Table\n\nTo **add a new table** to your notebook:\n\n1.  Click the `+` button next to an empty line,\n2.  Select `Table` from the menu.\n\nAlternatively, to add a table with the keyboard, open up the block menu by typing `/` on an empty paragraph, select `Table` using the `arrow keys`, and press `enter`.\n\nTo **delete a table**, hover over the table, click the **`⸬`** button that appears on the left, and then click `Delete`.\n\n<br />\n\n## Update a Table Name",
    "metadata": { "source": "docs/quick-start/tables.md" }
  },
  "17": {
    "pageContent": "To **delete a table**, hover over the table, click the **`⸬`** button that appears on the left, and then click `Delete`.\n\n<br />\n\n## Update a Table Name\n\nNew tables are assigned default names when created(Table1, Table2, ... ) <br />\nUpdate your table name, so it is easy to identify.\n\n- To **update a table name**, replace the old name on the top left of the table.\n\n## Update a Column Name\n\nNew columns are always assigned default names (Column1, Column2, ... ) <br />\nUpdate your column names to make them easier to identify on your calculations.\n\n- To **update a column name**, replace the old name by clicking it and picking a new one.\n\n## Update a Table Color and Icon\n\nNew tables are assigned default colors and icons. <br />\nPick new table colors and icons to give personality to your notebook without impacting your model.\n\n- To **update a table color and icon**, click the grid icon next to the table name, and choose a new color and icon from the menu.\n\n## Add Table Columns and Rows",
    "metadata": { "source": "docs/quick-start/tables.md" }
  },
  "18": {
    "pageContent": "- To **update a table color and icon**, click the grid icon next to the table name, and choose a new color and icon from the menu.\n\n## Add Table Columns and Rows\n\nExpand your table size with new columns and rows.\n\n- To **add a column**, click the `+` button on the right of the table.\n\nTo **delete a column**, click the upside-down triangle button on a column and select `Delete column`.\n\n- To **add a row**, click the `+ Add row` button at the end of the table.\n\nTo **delete a row**, hover a row, click the **`⸬`** button that appears on the left, and then click `Delete row`.\n\n## Rearrange Table Columns and Rows\n\nMove your table columns and rows to rearrange your table.\n\n- To **move a row**, hover over any row, click and hold the **`⸬`** button that appears on the left, and drag them to a new position inside the same table.\n- To **move a column**, click and hold the **`⸬`** button on the left of any column name and drag them to a new position inside the same table.\n\n<br />\n\n---\n\n# Continue Exploring:",
    "metadata": { "source": "docs/quick-start/tables.md" }
  },
  "19": {
    "pageContent": "<br />\n\n---\n\n# Continue Exploring:\n\n- Create more advanced tables with [Language Tables](/docs/advanced-concepts/language-tables)",
    "metadata": { "source": "docs/quick-start/tables.md" }
  },
  "20": {
    "pageContent": "---\nsidebar_position: 10\n---\n\n# Importing Data into Decipad\n\n:::caution `Experimental Feature`\nImporting Data is in development and its features are very limited. <br /> <b>Decipad only supports integrations with Google Sheets</b><br />\nShare your ideas and needs to help us improve data importing [here](mailto:support@decipad.com).\n:::\n\n## Copy & Paste Tables\n\nCopy and paste tables from the web or any document directly to your Decipad notebook to create a table quickly.\n\n## Drag & Drop CSV\n\nDrag & drop a CSV file into a decipad notebook to import that data into a table.\n\n## Import Data From a Google Sheet or CSV Link\n\nCreate a Decipad Table from a Google Sheet or CSV table using just their link.\n\n- To **import data from a link**, paste the Google Sheet or CSV link into your notebook and select `Import`. <br />\n  If you're importing from Google Sheets, make sure your document is public.\n\n## Connect to Live Data Sources",
    "metadata": { "source": "docs/quick-start/import-tables.md" }
  },
  "21": {
    "pageContent": "## Connect to Live Data Sources\n\nConnect a Decipad table directly to a Google Sheet or CSV table, so your notebook is always up-to-date with these sources.\n\n- To **connect to live data**, paste the Google Sheet or CSV link into your notebook and select `Connect`. <br />\n  If you're connecting to Google Sheets, make sure your document is public.",
    "metadata": { "source": "docs/quick-start/import-tables.md" }
  },
  "22": {
    "pageContent": "---\nsidebar_position: 6\n---\n\n# Create a Widget\n\nWidgets are blocks everyone can interact with. <br />\nThey create notebooks with assumptions readers can explore.\n\n## Create a New Widget\n\nTo **add a new widget** to your notebook:\n\n![Add Slider](https://user-images.githubusercontent.com/12210180/198076697-455cf53e-09b1-4cac-96a2-3a6e32c8ed4b.gif)\n\n1.  Click the `+` button next to an empty line,\n2.  Select `Input`, `Toogle`, `Date`, `Slider`, `Dropdown` or `Result` from the menu.\n\nAlternatively, to add a widget with the keyboard, open up the block menu by typing `/` on an empty paragraph, select `Input`, `Toogle`, `Date`, `Slider`, `Dropdown` or `Result` using the `arrow keys`, and press `enter`.\n\n<br />\n\n## Update a Widget Name\n\nNew widgets are assigned default names when created (Input1, Slider1, ... ) <br />\nUpdate your widget name, so it is easy to identify.\n\n- To **update a widget name**, replace the old name on the top left of the widget.\n\n## Update a Widget Color and Icon",
    "metadata": { "source": "docs/quick-start/widgets.md" }
  },
  "23": {
    "pageContent": "- To **update a widget name**, replace the old name on the top left of the widget.\n\n## Update a Widget Color and Icon\n\nNew widgets are assigned default colors and icons. <br />\nPick new widget colors and icons to give personality to your notebook without impacting your model.\n\n- To **update a widget color and icon**, click the pencil icon next to the widget name, and choose a new color and icon from the menu.\n\n## Place Widgets Side-by-side\n\nPlace widgets on the same line to save space.\n\nTo **place widgets side-by-side**:\n\n1.  Hover the widget you want to move.\n2.  Hold the **`⸬`** button that appears on the left and move the widget to the side of another widget.\n3.  A blue vertical line should appear to confirm the new location. Let got of the **`⸬`** button to place the widget on its new location.\n\n<br />\n\n## Widget Types\n\nYou can add **Inputs**, **Toggles**, **Dates**, **Sliders**, **Dropdowns** and **Results** widgets to your Notebooks.\n\n### Input Widget",
    "metadata": { "source": "docs/quick-start/widgets.md" }
  },
  "24": {
    "pageContent": "<br />\n\n## Widget Types\n\nYou can add **Inputs**, **Toggles**, **Dates**, **Sliders**, **Dropdowns** and **Results** widgets to your Notebooks.\n\n### Input Widget\n\nInputs widgets highlight a number in your notebook that you or anyone reading the notebook can update.\n\n- To **create a new input widget**, click the `+` button next to an empty line, and select `Input` from the menu.\n\n<br />\n\n### Toggle Widget\n\nToggle widgets let you or anyone reading the notebook switch between `on` or `off`.\n\n- To **create a new toggle widget**, click the `+` button next to an empty line, and select `Toggle` from the menu.\n\n<br />\n\n### Date Widget\n\nDate widgets let you or anyone reading the notebook pick a date.\n\n#### Create a Date Widget\n\n- To **create a new date widget**, click the `+` button next to an empty line, and select `Date` from the menu.<br />\n\n#### Update a Date Widget Range\n\n- To **update a date widget range**, click the `•••` button, `Change type` and pick a range from `Year`, `Month`, `Date` or `Time`.\n\n<br />",
    "metadata": { "source": "docs/quick-start/widgets.md" }
  },
  "25": {
    "pageContent": "#### Update a Date Widget Range\n\n- To **update a date widget range**, click the `•••` button, `Change type` and pick a range from `Year`, `Month`, `Date` or `Time`.\n\n<br />\n\n### Slider Widget\n\nSlider widgets let you or anyone reading the notebook use a slider to explore a range of options and visualize its effects on your model instantly.\n\n#### Create a Slider\n\n- To **create a new slider widget**, click the `+` button next to an empty line, and select `Slider` from the menu.\n\n#### Update Slider Range\n\n- To **update the slider range**, click the `•••` button to access the menu. Update the _Minimum_, _Maximum_, and _Step_\n\n<br />\n\n### Dropdown Widget\n\nDropdown widgets let you create lists of values anyone can pick from.\n\n#### Create a Dropdown\n\n- To **create a new dropdown widget**, click the `+` button next to an empty line, and select `Dropdown` from the menu.\n\n#### Add Values to a Dropdown\n\n- To **add values to a dropdown**, click `Select`, type your first value, and press `Enter`.",
    "metadata": { "source": "docs/quick-start/widgets.md" }
  },
  "26": {
    "pageContent": "#### Add Values to a Dropdown\n\n- To **add values to a dropdown**, click `Select`, type your first value, and press `Enter`.\n\n#### Edit or Delete a Dropdown Item\n\n- To **edit or delete a dropdown value**, click on the currently selected value to see the list. Then hover any value to get the options to **edit** (_Pencil Icon_) or to **delete** (_Trash Icon_).\n\n<br />\n\n### Result Widget\n\nResult widgets let you highlight any result on your notebook.\n\n- To **create an empty result widget**, click the `+` button next to an empty line, and select `Result` from the menu. Once placed, click the dropdown selector to pick a result to display.\n\n- To **create a result widget with a calculation result**, click any result on the right side of a calculation block, and a result widget with that value will appear on the notebook.\n\n<br />\n\n---\n\n# Continue Exploring:\n\nCheck how inputs work on a notebook:",
    "metadata": { "source": "docs/quick-start/widgets.md" }
  },
  "27": {
    "pageContent": "<br />\n\n---\n\n# Continue Exploring:\n\nCheck how inputs work on a notebook:\n\n1.  Access this example Notebook: [Simple Cashflow](https://alpha.decipad.com/n/Simple-Cashflow%3Ak1Zw0l2QmvbU5DIJ_XWxu?secret=vgzyDwDdJhTNN1SccetIe)\n2.  Update the `InitialInvestment` input widget from 100£ to 200£;\n3.  Check how the loan amount that you need to quick-start your business changes from 500£ to 400£ at the end of the notebook;",
    "metadata": { "source": "docs/quick-start/widgets.md" }
  },
  "28": {
    "pageContent": "---\nsidebar_position: 0\nhide_table_of_contents: false\nsidebar_class_name: start-icon\n---\n\n# Start Here\n\nDecipad is an interactive notebook where you can create and explain calculations, empowering you to make better decisions with numbers.\n\n## Who is Decipad for?\n\n- **Curious minds** who want to understand and explain numbers in their day-to-day life.\n- **Entrepreneurs**, ops, and other business-minded people that explore and explain numbers in their day-to-day work.\n\n## We Are Just Starting\n\nThese are Decipad’s early days, and your feedback is essential to us!\n\nDecipad is being built on the web by a small group of tinkerer's alongside the community, and you are now part of it. We believe that crunching numbers is easier together, so join us and other decimates on our journey.\n\n## How Can I Start?\n\n- [Create your first Notebook](/docs/quick-start/notebooks.md)",
    "metadata": { "source": "docs/quick-start/get-started-with-decipad.md" }
  },
  "29": {
    "pageContent": "---\nsidebar_position: 9\ntoc_min_heading_level: 2\n---\n\n# Create Table Calculations\n\nAdd calculation columns to your table to display results and create calculations quickly.\n\n### Add Table Calculations\n\nTo **add a new calculation to your table**:\n\n1.  [Add a new column to your table](/docs/quick-start/tables#add-columns-and-rows),\n2.  Click the drop-down triangle from your new column and select `Change type`, and then `Formula`. <br />\n    See how a new calculation line appears on top of your table.\n3.  Write your calculation on the new calculation line and see the results appear in the column.\n\n<br />\n\n### Add a Column Calculation\n\nAdd column calculations on the last row of any column to display insights. <br />\nSome useful examples are **averages**, **minimum values** and **maximum values** of your column values.\n\n- To add **a column calculation**, go to the last row of any column, click the `Calculate` triangle and select one of the calculations listed.\n\n### Update Column Type",
    "metadata": { "source": "docs/quick-start/table-calculations.md" }
  },
  "30": {
    "pageContent": "- To add **a column calculation**, go to the last row of any column, click the `Calculate` triangle and select one of the calculations listed.\n\n### Update Column Type\n\nColumn types allow you to specify the type of information in each column to help with your calculations. Columns types can be **numbers**, **currencies**, **formulas**, **checkboxes**, **text**, **dates**, and **series**.\n\n- To **update a column type**, click the down triangle button of any column, click `Change type`, and select a new type from the list.\n\n### Add Units to Columns\n\nUnits provide context to your numbers and help you create calculations fast. <br />\nAny column with numbers on a table can have a unit.\n\n- To **add a unit to a column**, click the down triangle button on a column, click `Change type`, and type your new unit in the `create custom` field.\n\n### Add Column Series",
    "metadata": { "source": "docs/quick-start/table-calculations.md" }
  },
  "31": {
    "pageContent": "- To **add a unit to a column**, click the down triangle button on a column, click `Change type`, and type your new unit in the `create custom` field.\n\n### Add Column Series\n\nColumn series allow you to specify a time interval on a column that expands as you add new rows to your table.\nTo create a column series, pick a starting point in time, and the following dates will be calculated for you.\nSeries can be spaced in years, months, or days (YYYY, YYYY/MM, YYYY/MM/DD).\n\n- To **add a series to a column**, click the down triangle button on a column, click `Change type`, and select `Series` and then `Date`.<br />\n  Then you will be able to specify a moment in time on the first cell of that column (YYYY, YYYY/MM, YYYY/MM/DD).\n\n### Hide Table Formulas\n\n- To **hide table formulas**, click the `Hide formulas` button on top of the table.\n- To **show table formulas**, click the `Show formulas` button on top of the table.\n\n<br />\n\n---\n\n# Continue Exploring:",
    "metadata": { "source": "docs/quick-start/table-calculations.md" }
  },
  "32": {
    "pageContent": "- To **hide table formulas**, click the `Hide formulas` button on top of the table.\n- To **show table formulas**, click the `Show formulas` button on top of the table.\n\n<br />\n\n---\n\n# Continue Exploring:\n\n- Create tables with code: [Language Tables](/docs/advanced-concepts/language-tables)",
    "metadata": { "source": "docs/quick-start/table-calculations.md" }
  },
  "33": {
    "pageContent": "---\nsidebar_position: 7\n---\n\n# Publish your Notebooks\n\nPublish your Notebook, so anyone with the link can follow your calculations.\n\n## Make a Notebook Public\n\nMake a notebook public with a link.\n\n![Publish](https://user-images.githubusercontent.com/12210180/198083883-9ce40254-d19d-4176-b93d-fa6b4e2565c0.gif)\n\n- To **make a notebook public**, click the `Publish` button on the top right of your notebook and **enable** the `Publish Notebook` switch. You can now share the link with anyone.\n\n## Publish New Changes\n\nMake updates to notebooks you already published.\n\n- To **publish new changes**, click the `Publish` button on the top right of your notebook, and then press `Publish New Changes`.\n\n## Make a Notebook Private\n\nMake your notebook private, so only you can access it.\n\n- To **make a notebook private**, click the `Publish` button on the top right of your notebook and **disable** the `Publish Notebook` switch.\n\n<br />\n\n---\n\n# Continue Exploring:",
    "metadata": { "source": "docs/quick-start/publish.md" }
  },
  "34": {
    "pageContent": "- To **make a notebook private**, click the `Publish` button on the top right of your notebook and **disable** the `Publish Notebook` switch.\n\n<br />\n\n---\n\n# Continue Exploring:\n\n- Check our [Gallery](/docs/gallery) of published notebooks\n- [Hide notebook blocks from readers](/docs/quick-start/blocks#hide-a-block-from-a-reader)\n- [Add widgets readers can explore](/docs/quick-start/widgets#create-a-new-widget)",
    "metadata": { "source": "docs/quick-start/publish.md" }
  },
  "35": {
    "pageContent": "---\nsidebar_position: 1\n---\n\n# Create a Notebook\n\nNotebooks are a place where you can combine numbers and narrative.\n\n## Video: Create Your First Notebook\n\n<div style={{position: 'relative', paddingBottom: '59.01639344262295%', height: 0}}>\n  <iframe src=\"https://www.loom.com/embed/27c131850ed54615b246773895147596\" frameBorder={0} webkitallowfullscreen mozallowfullscreen allowFullScreen style={{position: 'absolute', top: 0, left: 0, width: '100%', height: '100%'}} />\n</div>\n\n<br />\n\n## Create a New Notebook\n\n- To **create a notebook**, go to your workspace and click `Create Notebook` on the top right.\n\n## Duplicate a Published Notebook\n\n- To **duplicate a published notebook**, make sure you're signed in and visit the notebook you want to duplicate, then click `Duplicate Notebook` on the top right. <br />\n  Take a look at our [Gallery of examples](/gallery) to find notebooks to duplicate.\n\n## Duplicate Your Notebook",
    "metadata": { "source": "docs/quick-start/notebooks.md" }
  },
  "36": {
    "pageContent": "## Duplicate Your Notebook\n\n- To **duplicate your notebook**, on your workspace, hover the notebook you wish to duplicate, click the `•••` button on the right, and click `Duplicate`.\n\n## Archive a Notebook\n\nArchive a notebook.\n\n- To **archive a notebook**, on your workspace, hover the notebook you wish to delete, click the `•••` button on the right, and click `Archive`.\n\n## Delete a Notebook\n\nDelete a notebook forever. You can only delete notebooks that have been archived, to prevent accidental loss of data.\n\n- To **delete a notebook**, in the dashboard, on your archived notebooks section, hover the notebook you wish to delete, click the `•••` button on the right, and click `Delete`.\n\n## Export a Notebook\n\nDownload a copy of the contents of your notebook as a `json` file.\n\n- To **export a notebook**, go to your workspace, hover the notebook you want to export, click the `•••` button on the right and click `Download`.",
    "metadata": { "source": "docs/quick-start/notebooks.md" }
  },
  "37": {
    "pageContent": "- To **export a notebook**, go to your workspace, hover the notebook you want to export, click the `•••` button on the right and click `Download`.\n\n- To **import a notebook**, drag the `.json` file from your computer to any Decipad workspace.\n\n<br />\n\n---\n\n# Continue Exploring:\n\n- [Add blocks to your notebook](/docs/quick-start/blocks)",
    "metadata": { "source": "docs/quick-start/notebooks.md" }
  },
  "38": {
    "pageContent": "# lol what are you doing here?\n\n## [ENG-242](https://linear.app/decipad/issue/ENG-242)\n\n```deci live\n[1 cmeter, 1meter]\n==> Column cannot contain both centimeters and meters\n```\n\n## [ENG-275](https://linear.app/decipad/issue/ENG-275)\n\n```deci live\nAddDifferentDateUnits = [ date(2020-01) ] + [ 1 year ]\n==> [ month 2021-01 ]\n```\n\n## [ENG-246](https://linear.app/decipad/issue/ENG-246)\n\n```deci live\nOffer = 10 $\nStep = 100%\nDuration = [1..10]\n\ngrow(Offer, Step, Duration)\n==> [ 10 $, 20 $, 40 $, 80 $, 160 $, 320 $, 640 $, 1280 $, 2560 $, 5120 $ ]\n```\n\n## [ENG-277](https://linear.app/decipad/issue/ENG-277)\n\n```deci live\n300000 N/meter^2 + 1 bar\n==> 4 bars\n```\n\n## [ENG-140](https://linear.app/decipad/issue/ENG-140)\n\n```deci live\n(900*meter**2)**(1/2)\n==> 30 meters\n```\n\n## [ENG-263](https://linear.app/decipad/issue/ENG-263)\n\n```deci live\nTime = [date(2022-01) .. date(2025-01) by quarter]\nStartingDate = first(Time)\n==> quarter 2022-01-01 00:00\n```\n\n## [ENG-251](https://linear.app/decipad/issue/ENG-251)",
    "metadata": { "source": "docs/linear.acceptance.md" }
  },
  "39": {
    "pageContent": "```deci live\nTime = [date(2022-01) .. date(2025-01) by quarter]\nStartingDate = first(Time)\n==> quarter 2022-01-01 00:00\n```\n\n## [ENG-251](https://linear.app/decipad/issue/ENG-251)\n\n```deci live\nmiles * hour^-1\n==> 1 miles per hour\n```\n\n## [ENG-242](https://linear.app/decipad/issue/ENG-242)\n\n```deci live\n[1cmeter, 2meter, 3cmeter]\n==> Column cannot contain both centimeters and meters\n```\n\n## [ENG-216](https://linear.app/decipad/issue/ENG-216)\n\n```deci live\nSpeed = 10 miles / hour\ngrow(Speed, 10%, [1, 2, 3])\n==> [ 10 miles per hour, 11 miles per hour, 12.1 miles per hour ]\n```\n\n## [ENG-270](https://linear.app/decipad/issue/ENG-270)\n\n```deci live\n1 fahrenheit + 1\n==> 2 °F\n```\n\n## [ENG-211](https://linear.app/decipad/issue/ENG-211)\n\n```deci live\ntranspose([[5$],[10$],[15$]])\n==> [ [ 5 $, 10 $, 15 $ ] ]\n```\n\n## [ENG-286](https://linear.app/decipad/issue/ENG-286)\n\n```deci live\nAnimals = {\n  Name = [\"Person\", \"Falcon\"]\n  Speed = [27.33 miles/hour, 55 miles/hour]\n}",
    "metadata": { "source": "docs/linear.acceptance.md" }
  },
  "40": {
    "pageContent": "## [ENG-286](https://linear.app/decipad/issue/ENG-286)\n\n```deci live\nAnimals = {\n  Name = [\"Person\", \"Falcon\"]\n  Speed = [27.33 miles/hour, 55 miles/hour]\n}\n\nAnimals2 = {\n  Name = Animals.Name\n  Speed = [27.33 mph, 55 mph]\n}\n\nAnimals3 = {\n  Name = Animals.Name\n  Speed = [27.33 miles/hour in kilometer/second, 55 miles/hour in kilometer/second]\n}\n\nRace = {\n  Name = [\"Quarter\", \"Half\", \"Marathon\"]\n  Distance = [0.25 marathon, 0.5 marathon, 1 marathon]\n}\n\nHours = round(sum(1/(Animals.Speed / Race.Distance) in hours), 2)\nHours2 = round(sum(1/(Animals2.Speed / Race.Distance) in hours), 2)\nHours3 = round(sum(1/(Animals3.Speed / Race.Distance) in hours), 2)\n\n\n[Hours, Hours2, Hours3]\n==> [ [ 1.68 hours, 0.83 hours ], [ 1.68 hours, 0.83 hours ], [ 1.68 hours, 0.83 hours ] ]\n```\n\nWhy?\n\n```deci live\nDistance = 1.75 marathons in miles\nSpeed = [27.33 miles/hour, 55 miles/hour]\nround(1/(Speed / Distance), 2)\n==> [ 1.68 hours, 0.83 hours ]\n```\n\n## [ENG-139](https://linear.app/decipad/issue/ENG-139)",
    "metadata": { "source": "docs/linear.acceptance.md" }
  },
  "41": {
    "pageContent": "## [ENG-139](https://linear.app/decipad/issue/ENG-139)\n\n```deci live\nA = 3\nSQRTZ = sqrt(A * 3)\n==> 3\n```\n\n## [ENG-311](https://linear.app/decipad/issue/ENG-311)\n\n```deci live\n1000 milliliters in liters\n==> 1 liters\n```\n\n```deci live\nnuno = 100 kg\n2 tonnes in nuno\n==> 20 nunos\n```\n\n```deci live\nnuno = 100 kg\n1 nuno + 1 kg\n==> 101 kg\n```\n\n```deci live\n[1 kg, 4]\n==> [ 1 kg, 4 kg ]\n```\n\n## [ENG-307](https://linear.app/decipad/issue/ENG-307)\n\n```deci live\n1 centimeter^3 in cm3\n==> 1 cm³\n```\n\n```deci live\n(meter * meter * meter) in m3\n==> 1 m³\n```\n\n```deci live\n(cmeter * cmeter * cmeter) in cmeters^3\n==> 1 centimeters³\n```\n\n```deci live\n(1 kmeter * 1 kmeter) in km2\n==> 1 km²\n```\n\n```deci live\n(1 kmeter * 1 kmeter) in kmeter^2\n==> 1 kilometers²\n```\n\n```deci live\n(1 kmeter * 1 kmeter)\n==> 1 kilometers²\n```\n\n```deci live\n(1 kmeter * 1 kmeter) in meter^2\n==> 1000000 meters²\n```\n\n```deci live\n(1 kmeter * 1 kmeter) in cm2\n==> 10000000000 cm²\n```\n\n```deci live\n(1 kmeter * 1 kmeter) in cm2\n==> 10000000000 cm²\n```",
    "metadata": { "source": "docs/linear.acceptance.md" }
  },
  "42": {
    "pageContent": "```deci live\n(1 kmeter * 1 kmeter) in meter^2\n==> 1000000 meters²\n```\n\n```deci live\n(1 kmeter * 1 kmeter) in cm2\n==> 10000000000 cm²\n```\n\n```deci live\n(1 kmeter * 1 kmeter) in cm2\n==> 10000000000 cm²\n```\n\n## [ENG-326](https://linear.app/decipad/issue/ENG-139)\n\n## [ENG-308](https://linear.app/decipad/issue/ENG-308)\n\n```deci live\nround(1/2 pint in ml)\n==> 284 ml\n```\n\n## [ENG-326](https://linear.app/decipad/issue/ENG-326)\n\n```deci live\n3600 kj in kw h\n==> 1 kW·h\n```\n\n```deci live\n1 kwh in kj\n==> 3600 kJ\n```\n\n```deci live\n1 wh in j\n==> 3600 J\n```\n\n```deci live\n1 kwh in wh\n==> 1000 Wh\n```\n\n## [ENG-332](https://linear.app/decipad/issue/ENG-332)\n\n```deci live\n10 minutes/kmeter in kmeter/hour\n==> 6 kilometers per hour\n```\n\n```deci live\n10 s/kmeter in kmeter/s\n==> 0.1 kilometers/s\n```\n\n```deci live\n10 s/meter in meters/s\n==> 0.1 meters/s\n```\n\n```deci live\n10 s/kmeter^2 in kmeter^2/s\n==> 0.1 kilometers²/s\n```\n\n```deci live\n10 banana/s/meter in banana/meter/s\n==> 10 bananas·meter⁻¹·s⁻¹\n```",
    "metadata": { "source": "docs/linear.acceptance.md" }
  },
  "43": {
    "pageContent": "```deci live\n10 s/kmeter^2 in kmeter^2/s\n==> 0.1 kilometers²/s\n```\n\n```deci live\n10 banana/s/meter in banana/meter/s\n==> 10 bananas·meter⁻¹·s⁻¹\n```\n\n## [ENG-281](https://linear.app/decipad/issue/ENG-281)\n\n```deci live\n[10 .. 1 by -2]\n==> [ 10, 8, 6, 4, 2 ]\n```\n\n```deci live\n[10 .. 5]\n==> [ 10, 9, 8, 7, 6, 5 ]\n```",
    "metadata": { "source": "docs/linear.acceptance.md" }
  },
  "44": {
    "pageContent": "## [ENG-281](https://linear.app/decipad/issue/ENG-281)\n\n```deci live\n[10 .. 1 by -2]\n==> [ 10, 8, 6, 4, 2 ]\n```\n\n```deci live\n[10 .. 5]\n==> [ 10, 9, 8, 7, 6, 5 ]\n```\n\n```deci live\n[date(2003) .. date(2000) by month]\n==> [ month 2003-12, month 2003-11, month 2003-10, month 2003-09, month 2003-08, month 2003-07, month 2003-06, month 2003-05, month 2003-04, month 2003-03, month 2003-02, month 2003-01, month 2002-12, month 2002-11, month 2002-10, month 2002-09, month 2002-08, month 2002-07, month 2002-06, month 2002-05, month 2002-04, month 2002-03, month 2002-02, month 2002-01, month 2001-12, month 2001-11, month 2001-10, month 2001-09, month 2001-08, month 2001-07, month 2001-06, month 2001-05, month 2001-04, month 2001-03, month 2001-02, month 2001-01, month 2000-12, month 2000-11, month 2000-10, month 2000-09, month 2000-08, month 2000-07, month 2000-06, month 2000-05, month 2000-04, month 2000-03, month 2000-02, month 2000-01 ]\n```",
    "metadata": { "source": "docs/linear.acceptance.md" }
  },
  "45": {
    "pageContent": "```deci live\n[date(2003) .. date(2000)]\n==> [ year 2003, year 2002, year 2001, year 2000 ]\n```\n\n```deci live\n[10 .. 11 by -2]\n==> Invalid step in sequence: sequence is ascending but step is negative\n```\n\n## [ENG-336](https://linear.app/decipad/issue/ENG-336)\n\n```deci live\nDatez = { Year = [date(2021) .. date(2025)] }\nDatezA = last(Datez.Year)\nDatezFoo = date(2025)\nDatezA == DatezFoo\n==> true\n```",
    "metadata": { "source": "docs/linear.acceptance.md" }
  },
  "46": {
    "pageContent": "---\nsidebar_position: 2\n---\n\n# What is a Block?\n\nA block is everything you can add to a Decipad notebook.<br />\nSome of the available blocks are **tables**, **images**, **paragraphs**, **calculations** and **widgets**.\n\n## Add a Block\n\nTo **add a new block** to your notebook:\n\n![AddBlock](https://user-images.githubusercontent.com/12210180/198082774-643cbb40-4f1b-4077-954b-4b9f992a8094.gif)\n\n1.  Click the `+` button next to an empty line,\n2.  Select any block from the menu.\n\nAlternatively, to add a block with the keyboard, open up the block menu by typing `/` on a new empty like and write the name of the block. Press `Enter` to select and add the block to your notebook.\n\n## Move a Block\n\nRearrange all blocks in the notebook.\n\nTo **move a block** on your notebook:",
    "metadata": { "source": "docs/quick-start/blocks.md" }
  },
  "47": {
    "pageContent": "## Move a Block\n\nRearrange all blocks in the notebook.\n\nTo **move a block** on your notebook:\n\n1.  Hover the block you want to move,\n2.  Hold the **`⸬`** button that appears on the left and move the block to the place you desire. See where the block can be placed when a blue line appears.\n3.  Let go of the **`⸬`** button when you find a new spot for your block.\n\n## Delete a Block\n\n- To **delete a block**, hover the block you want to delete, click the **`⸬`** button that appears on the left, and then click `Delete`.\n\n## Duplicate a Block\n\n- To **duplicate a block**, hover the block you want to duplicate. Click the **`⸬`** button that appears on the left and select `Duplicate`.\n\n## Hide a Block from a Reader\n\nHide blocks from readers when you [publish your notebook](/docs/quick-start/publish).",
    "metadata": { "source": "docs/quick-start/blocks.md" }
  },
  "48": {
    "pageContent": "## Hide a Block from a Reader\n\nHide blocks from readers when you [publish your notebook](/docs/quick-start/publish).\n\n- To **hide a block from a reader**, hover the block you want to hide. Click the **`⸬`** button that appears on the left and select `Hide from reader`. <br />\n  Notice how your block fades and a new hidden icon appears on the left of the block.\n\n- To **show a block to the reader again**, hover the block you want to show. Click the **`⸬`** button that appears on the left and select `Show to reader`. <br />\n  Notice how the hidden icon disappears.\n\n<br />\n\n---\n\n# Continue Exploring:\n\n- [Create your first formula](/docs/quick-start/formulas)",
    "metadata": { "source": "docs/quick-start/blocks.md" }
  },
  "49": {
    "pageContent": "---\nsidebar_position: 21\nhide_table_of_contents: false\n---\n\n# Keyboard Shortcuts\n\nKeyboard shortcuts make editing and writing faster.\n\n## Shortcuts to Create Blocks\n\n- **Heading**, type `#` followed by a `space` <br />\n- **Sub-heading**, type `##` followed by a `space` <br />\n- **Calculations Block**, type `=` or <code>\\`\\`\\`</code> followed by a`space` <br />\n- **Bullet List**, type `-` or `*` followed by a `space` <br />\n- **Numbered List**, type `1.` followed by a `space` <br />\n- **Block Quote**, type`>` followed by a `space` <br />\n- **Callout**, type `>!` followed by a `space` <br />\n- **Divider**, type `---` followed by a `space` <br />\n\n## Shortcuts to Format Text",
    "metadata": { "source": "docs/quick-start/shortcuts.md" }
  },
  "50": {
    "pageContent": "## Shortcuts to Format Text\n\n- For **Italic**, wrap any words between `*` and `*` or `_` and `_`\n- For **Bold**, wrap any words between `**` and `**`\n- For **Strike-through**, wrap any words between `~~` and `~~`\n- For **Highlight**, wrap words between `==` and `==`\n- For **Inline Code**, wrap words between `` ` `` and `` ` ``\n- To create a **Magic Number**, wrap a variable name between `%`\n- You can mark **Spoilers** by wrapping text between `||` and `||`.\n- For **a Link**, use the notation `[link name](url)`\n- To add an **Image**, use the notation `![Alt text](https://media.giphy.com/media/krkrHAEodHgzP72rTI/giphy.gif)`",
    "metadata": { "source": "docs/quick-start/shortcuts.md" }
  },
  "51": {
    "pageContent": "---\nsidebar_position: 10\n---\n\n# Supported Units\n\nDecipad supports the following units and compositions of them. Unless stated, units default to the international standard.\n\nFor example, when we say Inch we mean Inch (International), i.e. `0.0254 m`.\n\nAll definitions are exact.\n\nSome conversions (e.g. bohr radius) are not exact by definition.\n\nPlease bear that in mind when using our units. Approximations are marked with a `*` for your convenience\n\n## Unit prefixes\n\nThe standard [metric unit prefixes](https://en.wikipedia.org/wiki/Metric_prefix) are available in Decipad.\n\n```deci live\n1 metre in cmeter\n==> 100 centimeters\n```\n\n## Length units\n\nThe default unit is Metre (`meter`).\n\nThe following are also supported:\n\n- Mile (`mile`, `mi`) = `1609.344 m` = `1,760 yards`\n- Yard (`yard`, `yd`) = `3 ft`\n- Foot (`foot`, `ft`) = `12 inches`\n- Inch (`inch`, `in`) = `0.0254 meters`\n\n```deci live\n1 mile in inches\n==> 63360 inches\n```\n\n## Typography & Displays",
    "metadata": { "source": "docs/basic-concepts/supported-units.md" }
  },
  "52": {
    "pageContent": "```deci live\n1 mile in inches\n==> 63360 inches\n```\n\n## Typography & Displays\n\n- Point (American, English) (`point`, `pt`) = `1/72.272 inches`\n- Twip (`twip`) = `1/1440 inches`\n- Pica (`pica`) = `12 points`\n\n```deci live\n1 point in twip\n==> 19.9247 twips\n```\n\n## Nautical\n\n- Nautical Mile (`nauticalmile`, `nmi`) = `1852 m`\n- Nautical League (`nauticalleague`, `nl`) = `3 nmi`\n- Fathom (`fathom`, `ftm`) = `6 ft`\n\n```deci live\n3 nmi in nl\n==> 1 nautical league\n```\n\n## Natural Sciences\n\n- Ångström (`angstrom`, `Å`) = `0.1 nm`\n- Attometre (`attometre`, `am`) = `1×10e−18 m`\n- Fermi (`fermi`, `fm`) = `0.000001 nm`\n- Bohr(\\*) (`bohr`, `a0`, `a₀`) = `5.29177210903e-11 m`\n\n```deci live\n1 angstrom in am\n==> 100000000 am\n```\n\n## Surveyor\n\n- Furlong (`furlong`, `fur`) = `220 yd`\n- Chain (`chain`, `ch`) = `66 ft`\n- Rod (`rod`, `rd`) = `0.25 chain`\n- Link (`link`, `lnk`) = `7.92 inches`\n\n```deci live\n1 rod in link\n==> 25 links\n```\n\n## Astronomy",
    "metadata": { "source": "docs/basic-concepts/supported-units.md" }
  },
  "53": {
    "pageContent": "```deci live\n1 rod in link\n==> 25 links\n```\n\n## Astronomy\n\n- Astronomical unit (`austronomicalunit`, `au`) = `1.495978707×10e11 m`\n- Light Year (`lightyear`, `ly`) = `9.4607304725808×10e15 m`\n- Light Day (`lightday`, `ld`) = `24 lh`\n- Light Hour (`lighthour`, `lh`) = `60 lm`\n- Light Minutes (`lightminute`) = `60 ls`\n- Light Second (`lightsecond`, `ls`) = `299792458 m`\n- Parsec (`parsec`, `pc`) = `30856775814913700 m`",
    "metadata": { "source": "docs/basic-concepts/supported-units.md" }
  },
  "54": {
    "pageContent": "```deci live\n1 ls in marathons\n==> 7104.9(284986372792984950823557293518189358928783031164829956155942647233084488683493304893944780187225974641545206778054271833155587154876170162341509657542362839198957222419717976063514634435359639767744993482640123237350396966465220997748548406209266500770233439981040407631235928427538807915629813958999881502547695224552672117549472686337243749259390923095153454200734684204289607773432871193269344709088754591776276810048583955444957933404431804716198601730062803649721530987083777698779476241260812892522810759568669273610617371726507880080578267567247304182960066358573290674250503614172295295651143500414741083066714065647588576845597819646877592131769166962910297428605) marathons\n```\n\n## Fun\n\n- Rope (`rope`) = `6.096 meters`\n- Hand (`hand`) = `4 inches`\n- Smoot (`smoot`) = `1,702 meters`\n- Marathon (`marathon`) = `42195 meters`\n- League (`league`, `lea`) = `4828 meters`\n\nIt takes over 26 horse races to make a marathon.",
    "metadata": { "source": "docs/basic-concepts/supported-units.md" }
  },
  "55": {
    "pageContent": "It takes over 26 horse races to make a marathon.\n\n```deci live\n(1 marathon in furlong) / 8\n==> 26.2187(574564543068480076354092102123598186590312) furlongs\n```\n\n## Speed units\n\nThe default unit is Kilometer per hour (`kph`).\n\nKilometer per hour can be expressed as `kilometer/hour` and we support expanding (or contracting) any area unit to SI units, i.e. `meters/second`.\n\nThe following are also supported:\n\n- Mile per hour (`mph`)\n- Knot (`knot`) = `1 nmi/hour` = `1.852 kilometer/hour`\n\n```deci live\n3.6 kph in meters/s\n==> 1 meters/s\n```\n\n## Area units\n\nThe default unit is Square Meter (`squaremeter`, `m2`, `m²`).\n\nSquare meter can be expressed as `m2` and we support expanding (or contracting) any area unit to si units.\n\nThe following are also supported:",
    "metadata": { "source": "docs/basic-concepts/supported-units.md" }
  },
  "56": {
    "pageContent": "The default unit is Square Meter (`squaremeter`, `m2`, `m²`).\n\nSquare meter can be expressed as `m2` and we support expanding (or contracting) any area unit to si units.\n\nThe following are also supported:\n\n- Square Kilometer (`squarekilometre`, `km2`, `km²`) = `10e6 m2`\n- Square Mile (`squaremile`, `sqmi`) = `2,589,988.110336 m2` = `3,097,600 sqyd`\n- Square Yard (`squareyard`, `sqyd`) = `9 sqft`\n- Square Foot (`squarefoot`, `sqft`) = `144 sqin`\n- Square Inch (`squareinch`, `sqin`) = `0.00064516 m2`\n\n```deci live\n(1 mi * 1mi in meter^2) == (1 sqmi in m2)\n==> true\n```\n\n## Natural Sciences\n\n- Barn (`barn`, `b`) = `10e−28 m2`\n\nSurveyor:\n\n- Hectare (`hectare`, `ha`) = `10,000 m2`\n- Are (`are`, `a`) = `100 m2`\n- Acre (`acre`, `ac`) = `4840 sqyd`\n- Barony (`barony`) = `4000 ac`\n\n```deci live\n1 ac in sqyd\n==> 4840 yd²\n```\n\n## Volume units\n\nThe default unit is Square Meter (`cubicmeter`, `m3`, `m³`).\n\nGallon can be expressed as `m3` and we support expanding (or contracting) any volume unit to SI units.",
    "metadata": { "source": "docs/basic-concepts/supported-units.md" }
  },
  "57": {
    "pageContent": "## Volume units\n\nThe default unit is Square Meter (`cubicmeter`, `m3`, `m³`).\n\nGallon can be expressed as `m3` and we support expanding (or contracting) any volume unit to SI units.\n\nThe following are also supported:\n\n- Liter (`liter`, `l`) = `0.001 m3`\n- Cubic Mile (`cumi`) ≡ `4168181825.440579584 m3`\n- Cubic Inch (`in3`, `in³`, `cuin`) = `16.387064×10e−6 m3`\n- Cubic Yard (`yd3`, `yd³`,`cuyd`) = `27 ft3`\n- Cubic Foot (`ft3`, `ft³`, `cuft`) = `1,728 sqin`\n- Acre Foot (`acrefoot`, `acft`) = `1 ac x 1 ft`\n- Ton (`ton_displacement`) = `0.99108963072 m3`\n- Gallon (Imperial) (`gallon`, `gal`) = `4.54609 liters`\n- Barrel (Imperial) (`barrel`, `bl`) = `36 gal`\n- Bushel (Imperial) (`bushel`, `bu`) = `8 gallons`\n- Bucket (Imperial) (`bucket`, `bkt`) = `4 gallons`\n- Pint (Imperial) (`pint`) = `≡ 1/8 gal`\n- Ounce (Imperial) (`floz`) = `28.4130625×10e−6 m3`\n\n```deci live\n1 barrel in gallon\n==> 36 gallons\n```\n\n```deci live\n(1 ac * 1 ft) in acft\n==> 1000 acft\n```\n\nCooking:",
    "metadata": { "source": "docs/basic-concepts/supported-units.md" }
  },
  "58": {
    "pageContent": "```deci live\n1 barrel in gallon\n==> 36 gallons\n```\n\n```deci live\n(1 ac * 1 ft) in acft\n==> 1000 acft\n```\n\nCooking:\n\n- Cup (Metric) (`cup`) = `250×10e−6 m3`\n- Tea Spoon (Metric) (`teaspoon`, `tsp`) = `5×10e−6 m3`\n- Table Spoon (Metric) (`tablespoon`, `tbsp`) = `3 tsp`\n- Pinch (Metric) (`pinch`) = `1/16 tsp`\n- Dash (Metric) (`dash`) = `1/2 pinch`\n\n```deci live\n20 tbsp in cups\n==> 1.2 cups\n```\n\n## Pressure units\n\nThe default unit is Atmosphere (`atmosphere`, `atm`).\n\nPascal can be expressed as `kg⋅meter−1⋅s−2` and we support expanding (or contracting) any pressure unit to SI units.\n\nThe following are also supported:\n\n- Pascal (`pascal`, `pa`) = `1/101325 atm`\n- Bar (`bar`, `ba`) = `105 Pa`\n- Torr (`torr`, `mmHg`) = `1/760 atm`\n- Pound per square inch(\\*) (`psi`) =\n\n## Energy units\n\nThe default unit is Joule (`Joule`, `J`).\n\nJoule can be expressed as `kg⋅m2⋅s−2` and we support expanding (or contracting) any energy unit to SI units.\n\nThe following are also supported:",
    "metadata": { "source": "docs/basic-concepts/supported-units.md" }
  },
  "59": {
    "pageContent": "## Energy units\n\nThe default unit is Joule (`Joule`, `J`).\n\nJoule can be expressed as `kg⋅m2⋅s−2` and we support expanding (or contracting) any energy unit to SI units.\n\nThe following are also supported:\n\n- Calorie (`calorie`, `cal`) = `4.1868 J`\n- Watt hour (`Wh`) = `3600 J`\n\n## Force units\n\nThe default unit is Newton (`newton`, `N`). Newton is expressed as `1 kg⋅m⋅s−2` and we support expanding (or contracting) any force unit to SI units.\n\n## Mass units\n\nThe default unit is Gram (`g`, `gr`).\n\nThe following are also supported:\n\n- Tonne (`tonne`) = `1000 kg`\n- Ton (`ton`) = `2240 lbav`\n- Pound (Imperial) (`lbav`) = `0.45359237 kg`\n- Ounce (Imperial) (`ozav`) = `1⁄16 lbav`\n- Ounce (US food nutrition labelling) (`oz`) = `28 g`\n\n## Temperature units\n\nThe default unit is Kelvin (`kelvin`, `K`).\n\nThe following are also supported:\n\n- Celsius (`celsius`, `°c`) = `[K] ≡ [°C] + 273.15`\n- Fahrenheit (`fahrenheit`, `°f`) = `[K] ≡ ([°F] + 459.67) × 5⁄9`\n\n## Time units\n\nThe default unit is Second (`second`, `sec`, `s`).",
    "metadata": { "source": "docs/basic-concepts/supported-units.md" }
  },
  "60": {
    "pageContent": "- Celsius (`celsius`, `°c`) = `[K] ≡ [°C] + 273.15`\n- Fahrenheit (`fahrenheit`, `°f`) = `[K] ≡ ([°F] + 459.67) × 5⁄9`\n\n## Time units\n\nThe default unit is Second (`second`, `sec`, `s`).\n\nThe following are also supported:\n\n- Year (`year`, `y`) = `12 months`\n- Month (`month`, `m`) = `1/12 year`\n- Week (`day`, `day`) = `7 days`\n- Day (`day`, `day`) = `24 h`\n- Hour (`hour`, `h`) = `60 minutes`\n- Minutes (`minute`, `m`) = `60 s`\n\n## Frequency units\n\nThe default unit is Newton (`hertz`, `Hz`).\n\nHertz can be expressed as `s−1` and we support expanding (or contracting) any frequency unit to SI units.\n\n## Information units\n\nThe default unit is Bit (`bit`).\n\nByte (`byte`) is also available and defined as `8 bits`.\n\nCurrently we don't support [binary unit prefixes](https://en.wikipedia.org/wiki/Binary_prefix).\n\n## Power units\n\nThe default unit is Watt (`watt`, `W`).\n\nWatt can be expressed as `kg⋅m2⋅s−3` and we support expanding (or contracting) any power unit to SI units.\n\n## Substance units",
    "metadata": { "source": "docs/basic-concepts/supported-units.md" }
  },
  "61": {
    "pageContent": "## Power units\n\nThe default unit is Watt (`watt`, `W`).\n\nWatt can be expressed as `kg⋅m2⋅s−3` and we support expanding (or contracting) any power unit to SI units.\n\n## Substance units\n\nThe default unit is Mole (`mole`, `mol`).\n\n## Electric current units\n\nThe default unit is Watt (`ampere`, `A`).\n\nWatt can be expressed as `kg⋅m2⋅s−3⋅A−2` and we support expanding (or contracting) any electrical current unit to SI units.\n\n## Electric charge units\n\nThe default unit is Coulomb (`coulomb`, `C`).\n\nCoulomb can be expressed as `s⋅A` and we support expanding (or contracting) any electric charge unit to SI units.\n\n## Electrical capacitance\n\nThe default unit is Farad (`farad`, `F`).\n\nFarad can be expressed as `kg−1⋅m−2⋅s4⋅A2` and we support expanding (or contracting) any electrical capacitance unit to SI units.\n\n## Electrical resistance\n\nThe default unit is Omh (`omh`, `Ω`).\n\nOhm can be expressed as `kg⋅m2⋅s−3⋅A−2` and we support expanding (or contracting) any electrical resistance unit to SI units.\n\n## Electrical conductance",
    "metadata": { "source": "docs/basic-concepts/supported-units.md" }
  },
  "62": {
    "pageContent": "The default unit is Omh (`omh`, `Ω`).\n\nOhm can be expressed as `kg⋅m2⋅s−3⋅A−2` and we support expanding (or contracting) any electrical resistance unit to SI units.\n\n## Electrical conductance\n\nThe default unit is Siemens (`siemens`).\n\nSiemens can be expressed as `kg−1⋅m−2⋅s3⋅A2` and we support expanding (or contracting) any electrical conductance unit to SI units.\n\n## Voltage\n\nThe default unit is Volt (`volt`, `V`).\n\nVolt can be expressed as `kg⋅m2⋅s−3⋅A−1` and we support expanding (or contracting) any voltage unit to SI units.\n\n## Luminous Intensity\n\nThe default unit is Candela (`candela`, `cd`).\n\n## Luminous Flow\n\nThe default unit is Lumen (`lumen`, `lm`).\n\nLumen can be expressed as `cd⋅sr` and we support expanding (or contracting) any luminous flow unit to SI units.\n\n## Solid Angle\n\nThe default unit is Lumen (`steraradian`, `sr`).\n\n## Angles\n\nThe default unit for angles is radians (`radian`, `rad`). Alternatively, you can use degrees (`degree`, `°`).\n\n## Currency",
    "metadata": { "source": "docs/basic-concepts/supported-units.md" }
  },
  "63": {
    "pageContent": "## Solid Angle\n\nThe default unit is Lumen (`steraradian`, `sr`).\n\n## Angles\n\nThe default unit for angles is radians (`radian`, `rad`). Alternatively, you can use degrees (`degree`, `°`).\n\n## Currency\n\nCurrencies can be expressed as their symbol or by their name.\n\n### List of supported currencies",
    "metadata": { "source": "docs/basic-concepts/supported-units.md" }
  },
  "64": {
    "pageContent": "| Currency                | Name | Symbol |\n| ----------------------- | ---- | ------ |\n| 🇺🇸 United States dollar | USD  | $      |\n| 🇪🇺 Euro                 | EUR  | €      |\n| 🇯🇵 Japanese yen         | JPY  | ¥      |\n| 🇬🇧 Pound sterling       | GBP  | £      |\n| 🇦🇺 Australian dollar    | AUD  | A$     |\n| 🇨🇦 Canadian dollar      | CAD  | C$     |\n| 🇨🇭 Swiss franc          | CHF  | CHF    |\n| 🇨🇳 Renminbi             | CNY  | ¥      |\n| 🇭🇰 Hong Kong dollar     | HKD  | HK$    |\n| 🇳🇿 New Zealand dollar   | NZD  | NZ$    |\n| 🇸🇪 Swedish krona        | SEK  | kr     |\n| 🇰🇷 South Korean won     | KRW  | ₩      |\n| 🇸🇬 Singapore dollar     | SGD  | S$     |\n| 🇳🇴 Norwegian krone      | NOK  | kr     |\n| 🇲🇽 Mexican peso         | MXN  | $      |\n| 🇮🇳 Indian rupee         | INR  | ₹      |\n| 🇷🇺 Russian ruble        | RUB  | ₽      |\n| 🇿🇦 South African rand   | ZAR  | R      |\n| 🇹🇷 Turkish lira         | TRY  | ₺      |\n| 🇧🇷 Brazilian real       | BRL  | R$     |",
    "metadata": { "source": "docs/basic-concepts/supported-units.md" }
  },
  "65": {
    "pageContent": "| 🇷🇺 Russian ruble        | RUB  | ₽      |\n| 🇿🇦 South African rand   | ZAR  | R      |\n| 🇹🇷 Turkish lira         | TRY  | ₺      |\n| 🇧🇷 Brazilian real       | BRL  | R$     |\n| 🇹🇼 New Taiwan dollar    | TWD  | NT$    |\n| 🇩🇰 Danish krone         | DKK  | kr     |\n| 🇵🇱 Polish złoty         | PLN  | zł     |\n| 🇹🇭 Thai baht            | THB  | ฿      |\n| 🇮🇩 Indonesian rupiah    | IDR  | Rp     |\n| 🇭🇺 Hungarian forint     | HUF  | Ft     |\n| 🇨🇿 Czech koruna         | CZK  | Kč     |\n| 🇮🇱 Israeli new shekel   | ILS  | ₪      |\n| 🇨🇱 Chilean peso         | CLP  | CLP$   |\n| 🇵🇭 Philippine peso      | PHP  | ₱      |\n| 🇦🇪 UAE dirham           | AED  | د.إ    |\n| 🇨🇴 Colombian peso       | COP  | COL$   |\n| 🇸🇦 Saudi riyal          | SAR  | ﷼      |\n| 🇲🇾 Malaysian ringgit    | MYR  | RM     |\n| 🇷🇴 Romanian leu         | RON  | L      |\n| 🇺🇦 Ukrainian hryvnia    | UAH  | ₴      |",
    "metadata": { "source": "docs/basic-concepts/supported-units.md" }
  },
  "66": {
    "pageContent": "---\nsidebar_position: 13\nsidebar_class_name: hide-from-sidebar\n---\n\n# Retired features\n\n## Select\n\nYou will get this error when you attempt to use our retired feature select().\n\n```deci live\nTable = {\n  A = 1\n  B = 2\n}\nselect(Table, A)\n==> You're using a feature that's been retired\n```\n\n`select()` has been retired as it hinders Decipad's ability to understand tables internally and empower users to do more with them.\n\nIf you needed `select()`'s functionality, you can create a new table. This is not recommended because the new table won't be connected to the old one.\n\n```deci live\nTable = {\n  A = 1\n  B = 2\n}\nNewTable = {\n  A = Table.A\n}\n==> {\n  A = [ 1 ]\n}\n```\n\n## Table spread\n\nWhen creating a table using the table spread syntax, you get this error:\n\n```deci live\nTable = {\n  A = 1\n}\nTable2 = {\n  ...Table\n  B = 2\n}\n==> You're using a feature that's been retired\n```\n\nThe table spread syntax has been retired, but you can instead extend existing tables:",
    "metadata": { "source": "docs/basic-concepts/retired-features.md" }
  },
  "67": {
    "pageContent": "```deci live\nTable = {\n  A = 1\n}\nTable2 = {\n  ...Table\n  B = 2\n}\n==> You're using a feature that's been retired\n```\n\nThe table spread syntax has been retired, but you can instead extend existing tables:\n\n```deci live\nTable = {\n  A = 1\n}\nTable.B = 2\nTable\n==> {\n  A = [ 1 ],\n  B = [ 2 ]\n}\n```\n\n## Splitby\n\nIf you attempt to use the `splitby` function, you get an error.\n\n```deci live\nTableToSplitBy = {\n  Column = [\"A\", \"B\", \"C\"]\n  SplitKey = [1, 2, 2]\n}\n\nsplitby(TableToSplitBy, TableToSplitBy.Column)\n==> You're using a feature that's been retired\n```\n\nThis feature has been retired to improve our internal support of tables.",
    "metadata": { "source": "docs/basic-concepts/retired-features.md" }
  },
  "68": {
    "pageContent": "---\nsidebar_position: 4\n---\n\n# Define a Condition\n\n## If Then Else\n\nYou can now use a boolean value to perform an operation conditionally by using `if ... then ... else` like this:\n\n```deci live\nTheSunIsDown = false\nif TheSunIsDown then \"Dinner\" else \"Lunch\"\n==> 'Lunch'\n```\n\n> Here we're using another type of value: the string. \"dinner\" and \"lunch\" are strings of text. They're enclosed in quotation marks and can have any character inside except new lines (a new line happens when you press the _Enter_ key).\n\nYou can have more complex values inside `if ... then ... else` expressions, but both expressions must have the same type.\n\nFor instance, the following is invalid:\n\n```deci live\nTheSunIsDown = true\nif TheSunIsDown then \"dinner\" else 337\n==> This operation requires a string and a number was entered\n```\n\nYou can assign the result of an `if ... then ... else` to a variable:\n\n```deci live\nPoints = 8\nStars = if Points > 6\n  then 5\n  else Points / 2\n==> 5\n```",
    "metadata": { "source": "docs/basic-concepts/conditions.md" }
  },
  "69": {
    "pageContent": "You can assign the result of an `if ... then ... else` to a variable:\n\n```deci live\nPoints = 8\nStars = if Points > 6\n  then 5\n  else Points / 2\n==> 5\n```\n\n> If you're wondering, no, you can't have an `if` without the `else`. If you did, you wouldn't be able to determine the type of an expression, and that can lead to a whole mess of programming errors that you may want to avoid.",
    "metadata": { "source": "docs/basic-concepts/conditions.md" }
  },
  "70": {
    "pageContent": "---\nsidebar_position: 12\n---\n\n# Inline Numbers\n\nInline Numbers let you embed calculation results in your text to help you explain the context. They are also dynamic and update when you make changes to your model.\n\n![Inline Numbers](./img/InlineNumbers.gif)\n\n## Create Inline Numbers with the = shortcut\n\n**Embed any number or calculation when writing a sentence.** <br /> Press the `=` key, and a formula bar will pop up. Type your calculation and see the result embedded in your text.\n\n## Drag & Drop Inline Numbers from your Number's Catalog\n\n**Embed any value from the number's catalog on the left side of your notebook** <br /> Just click and hold the **`⸬`** button that shows when you hover a number and drop it on your text.\n\n## Drag & Drop Inline Numbers from Data Views\n\n**Drag any aggregation from a Data View to embed on your text** <br /> Just click and hold any result and drop it to any paragraph.\n\n## Drag & Drop Inline Numbers from Column Results",
    "metadata": { "source": "docs/basic-concepts/inline-numbers.md" }
  },
  "71": {
    "pageContent": "**Drag any aggregation from a Data View to embed on your text** <br /> Just click and hold any result and drop it to any paragraph.\n\n## Drag & Drop Inline Numbers from Column Results\n\n**Drag any calculation result to embed on your text** <br /> Just click and hold the result on the right of your calculation and drop it on any paragraph.\n\n## Edit Inline Numbers\n\nClick on any inline number derived from a calculation to pull up the formula bar to edit. It will reflect any changes once you exit edit mode.\n\n**Some Inline Numbers can't be edited**. Inline numbers that were created by dragging results from Data Views or Column Results only showcase their formula and can't be edited, only deleted.",
    "metadata": { "source": "docs/basic-concepts/inline-numbers.md" }
  },
  "72": {
    "pageContent": "---\nsidebar_position: 2\n---\n\n# Define a String\n\nText, words, phases, all of these can be data points, but how do you work with them on your notebook?\nThe answer is _strings_!\n\nWhen defining a variable you will have different data types depending on the data you want to represent. For instance, a string is a data type used to represent text.\n\nTo declare a string, place your text between quotation marks `\"`. Take a look at this example:\n\n```deci live\nA = \"Hello world!\"\nA\n==> 'Hello world!'\n```\n\nThe variable `A` is declared with the string \"Hello world!\". From now on, each time you use the variable `A`, you will be using \"Hello world!\" behind the scenes.\n\n## Joining two strings\n\nSometimes you will have separated variables with the phase you want to display and you may want to join them. Join two strings with the `+` operator like this:\n\n```deci live\nH = \"Hello \"\nW = \"World!\"\nH + W\n==> 'Hello World!'\n```",
    "metadata": { "source": "docs/basic-concepts/strings.md" }
  },
  "73": {
    "pageContent": "---\nsidebar_position: 3\n---\n\n# Define a Date\n\nDecipad tries to capture time in a natural way for people.\n\n## Time granularity\n\nA time value has a granularity, which can be a year, a month, a day, or a specific time. In Decipad this time value has the granularity of a day:\n\n```deci live\ndate(2022-06-30)\n==> day 2022-06-30\n```\n\nYou can specify a time value to the hour:\n\n```deci live\ndate(2022-06-30 16)\n==> hour 2022-06-30 16:00\n```\n\nOr to the minute:\n\n```deci live\ndate(2022-06-30 16:45)\n==> minute 2022-06-30 16:45\n```\n\nA time value can have any of the following granularities:\n\n- year\n- month\n- day\n- time\n\n## Contains\n\nYou can then inquire if a certain time value is within another:\n\n```deci live\nDay = date(2022-06-30)\nMinute = date(2022-06-30 11:59)\n\nDay contains Minute\n==> true\n```\n\n## Time-traveling\n\nYou can add a time duration to a date:\n\n```deci live\nStart = date(2021-01-01)\nEnd = Start + 1 year + 6 months + 5 days\n==> day 2022-07-06\n```\n\nOr subtract two dates to get a time duration:",
    "metadata": { "source": "docs/basic-concepts/dates.md" }
  },
  "74": {
    "pageContent": "You can add a time duration to a date:\n\n```deci live\nStart = date(2021-01-01)\nEnd = Start + 1 year + 6 months + 5 days\n==> day 2022-07-06\n```\n\nOr subtract two dates to get a time duration:\n\n```deci live\nStart = date(2022-06-30)\nEnd = date(2022-09-15)\nDifference = End - Start\n==> 77 days\n```\n\n## Time conversions\n\nUnlike other units, in units of time different units might have different base.\n\nFor example, some years have 365 days while other years have 366. May has 31 days, June 29.\n\nThat means that Decipad cannot convert months into weeks:\n\n```deci live\n1 month in weeks\n==> 4.(285714) weeks\n```\n\nYou can create a custom unit, in case you know how many days the specific month has:\n\n```deci live\nmonth = 31 days\n1 month in weeks\n==> 4.(428571) weeks\n```\n\nOr, if you want to use the average amount of days that exist in a month:\n\n```deci live\nyear = 365 days\nmonth = year / 12\nround(1 month in weeks, 1)\n==> 4.3 weeks\n```",
    "metadata": { "source": "docs/basic-concepts/dates.md" }
  },
  "75": {
    "pageContent": "Or, if you want to use the average amount of days that exist in a month:\n\n```deci live\nyear = 365 days\nmonth = year / 12\nround(1 month in weeks, 1)\n==> 4.3 weeks\n```\n\nHowever, you need to be mindful. Now, `year` is defined as a number of days. So you can't convert a year into a decade for example:\n\n```deci live\nyear = 365 days\n1 year in decades\n==> 0.1013(8) decades\n```\n\nBut you still can convert a decade into years, since the definition of `decade` is unchanged and it will ignore your user defined `year`.\n\n```deci live\nyear = 365 days\n1 decade in years\n==> 10 years\n```\n\n## Formulas on dates\n\n[Here is a list of all the functions that work on dates](/docs/formulas/formulas-for-dates).\n[Read more on sequences and how they work with time](/docs/advanced-concepts/sequences).",
    "metadata": { "source": "docs/basic-concepts/dates.md" }
  },
  "76": {
    "pageContent": "---\nsidebar_position: 12\nsidebar_class_name: hide-from-sidebar\n---\n\n# Language Errors\n\n## Cannot convert between units\n\n:::caution `cannot-convert-between-units`\nDon't know how to convert between units cup and grams\n:::\n\nYou will get this error message when you cannot convert between units.\n\n```deci live\n1 cup in gram\n==> Don't know how to convert between units cups and grams\n```\n\nThis is because cup is a volume, and kg is mass. So the question is how many\n\nSo for a liter of water we have:\n\n```deci live\nFlourDensity = 0.8 g/ml\n1 cup * FlourDensity\n==> 200 g\n```\n\n## Column contains inconsistent type\n\n:::caution `column-contains-inconsistent-type`\nColumn cannot contain both ft and centimeters\n:::\n\nWe don't support having multiple types in the same column.\n\n```deci live\n[1 ft, 2 centimeter]\n==> Column cannot contain both ft and centimeters\n```\n\nYou can organise them in different columns:",
    "metadata": { "source": "docs/basic-concepts/language-errors.md" }
  },
  "77": {
    "pageContent": "We don't support having multiple types in the same column.\n\n```deci live\n[1 ft, 2 centimeter]\n==> Column cannot contain both ft and centimeters\n```\n\nYou can organise them in different columns:\n\n```deci live\nFruits = {\n    Oranges = [1 orange],\n    Pears = [2 pears]\n}\n==> {\n  Oranges = [ 1 oranges ],\n  Pears = [ 2 pears ]\n}\n```\n\n## Expected unit\n\n:::caution `expected-unit`\nThis operation requires compatible units\n:::\n\nYou cannot add incompatible types.\n\n```deci live\n5 apples + 5 oranges\n==> This operation requires compatible units\n```\n\nYou can also get this error if you try to perform an operation in incompatible units\n\n```deci live\n1 month + 1 day\n==> This operation requires compatible units\n```\n\nThis is because different months have different amounts of days.\n\n```deci live\nDaysInMonth = 31 days\nDaysInMonth + 1 day\n==> 32 days\n```\n\n## Expected but got\n\n:::caution `expected-but-got`\nThis operation requires a range and a number was entered\n:::",
    "metadata": { "source": "docs/basic-concepts/language-errors.md" }
  },
  "78": {
    "pageContent": "```deci live\nDaysInMonth = 31 days\nDaysInMonth + 1 day\n==> 32 days\n```\n\n## Expected but got\n\n:::caution `expected-but-got`\nThis operation requires a range and a number was entered\n:::\n\nYou are calling a function, or using an operator, with a wrong argument. For instance in the formula below we are mixing a boolean and a number.\n\n```deci live\nfalse or 1234\n==> This operation requires a boolean and a number was entered\n```\n\n## Expected primitive\n\n:::caution `expected-primitive`\nThis operation requires a primitive value (string, number, boolean or date) and a table was entered\n:::\n\nYou are trying to use an operation that requires a primitive value, for example searching a matrix. To solve this you need to pass in a primitive value, such as a string, number, boolean, or date.\n\n## Complex expression in exponent\n\n:::caution `complex-expression-exponent`\nThe exponent must be a simple expression\n:::",
    "metadata": { "source": "docs/basic-concepts/language-errors.md" }
  },
  "79": {
    "pageContent": "## Complex expression in exponent\n\n:::caution `complex-expression-exponent`\nThe exponent must be a simple expression\n:::\n\nThe power component in an exponentiation can only be a simple expression (a number or expression composed of built-in functions).\n\n```deci live\n(30 meters)**([1,2,3])\n==> Complex expressions not supported in exponents\n```\n\n## Sequence step must not be zero\n\n:::caution `sequence-step-zero`\nThe step value on a sequence must not be zero\n\nA sequence can have an optional argument specifying its step, which\ncannot be zero.\n\n```deci live\n[1 .. 3 by 0]\n==> Sequence step must not be zero\n```\n\n## Invalid step in sequence\n\n:::caution `invalid-sequence-step`\nThe step of a sequence must be compatible with the sequence\n\nIf you specify a step for an ascending sequence, it must be positive. If\nyou specify a step for a descending sequence, it must be negative.\n\n```deci live\n[1 .. 3 by -1]\n==> Invalid step in sequence: sequence is ascending but step is negative\n```\n\n## Expected arg count",
    "metadata": { "source": "docs/basic-concepts/language-errors.md" }
  },
  "80": {
    "pageContent": "```deci live\n[1 .. 3 by -1]\n==> Invalid step in sequence: sequence is ascending but step is negative\n```\n\n## Expected arg count\n\n:::caution `expected-arg-count`\nThe function add requires 2 parameters and 1 parameters were entered\n:::\n\nYou are calling the function but you are providing the wrong number of arguments\n\n```deci live\nadd (x,y) = x + y\nadd(1)\n==> The function add requires 2 parameters and 1 parameters were entered\n```\n\nYou can fix it by providing the missing argument:\n\n```deci live\nadd (x,y) = x + y\nadd(5,10)\n==> 15\n```\n\n## Bad overloaded builtin call\n\n:::caution `bad-overloaded-builtin-call`\nThe function + cannot be called with (string, years)\n:::\n\nYou probably made an error while typing, and Decipad cannot calculate that operation:\n\n```deci live\nDate = date(2025)\n\"Date\" + 1 year\n==> The function + cannot be called with (string, years)\n```\n\nYou can fix it by providing fixing the typo:\n\n```deci live\nDate = date(2025)\nDate + 1 year\n==> year 2026\n```\n\n## Mismatched Specificity",
    "metadata": { "source": "docs/basic-concepts/language-errors.md" }
  },
  "81": {
    "pageContent": "You can fix it by providing fixing the typo:\n\n```deci live\nDate = date(2025)\nDate + 1 year\n==> year 2026\n```\n\n## Mismatched Specificity\n\n:::caution `mismatched-specificity`\nExpected time specific up to the year, but got day\n:::\n\nYou are trying to do an operation on a date with a different granularity.\n\n```deci live\ndate(2022) + 1 day\n==> Expected time specific up to the year, but got day\n```\n\nBut adding a year works:\n\n```deci live\ndate(2022) + 1 year\n==> year 2023\n```\n\nIf you want to add a day you need to define the granularity of your date at that level:\n\n```deci live\ndate(2022-06-30) + 1 day\n==> day 2022-07-01\n```\n\nYou can fix it by providing fixing the typo:\n\n```deci live\nDate = date(2025)\nDate + 1 year\n==> year 2026\n```\n\n## Formula Cannot Call Itself\n\n:::caution `formula-cannot-call-itself`\nMyFormula() cannot be used in its own definition\n:::\n\nYou are trying to call a formula inside the definition for the formula.",
    "metadata": { "source": "docs/basic-concepts/language-errors.md" }
  },
  "82": {
    "pageContent": "## Formula Cannot Call Itself\n\n:::caution `formula-cannot-call-itself`\nMyFormula() cannot be used in its own definition\n:::\n\nYou are trying to call a formula inside the definition for the formula.\n\n```deci live\nMyFormula(Arg) = MyFormula(Arg) + 1\nMyFormula(0)\n==> MyFormula() cannot be used in its own definition\n```\n\nThis is not supported.\n\n## Expected table and associated column\n\n:::caution `expected-table-and-associated-column`\nExpected table and associated column\n:::\n\nYou passed a column that's not associated with that table.\n\nWhen creating a table, its columns are inherently associated with it. Functions such as `sortby` need this association.\n\n```deci live\nMyTable = {\n  Items = [3, 1, 2]\n}\nsortby(MyTable, [1, 2, 3])\n==> Expected table and associated column\n```\n\nMake sure this association exists by using a table, and then its column.\n\n```deci live\nMyTable = {\n  Items = [3, 1, 2]\n}\nsortby(MyTable, MyTable.Items)\n==> {\n  Items = [ 1, 2, 3 ]\n}\n```\n\n## Duplicated table column",
    "metadata": { "source": "docs/basic-concepts/language-errors.md" }
  },
  "83": {
    "pageContent": "```deci live\nMyTable = {\n  Items = [3, 1, 2]\n}\nsortby(MyTable, MyTable.Items)\n==> {\n  Items = [ 1, 2, 3 ]\n}\n```\n\n## Duplicated table column\n\n:::caution `duplicated-table-column`\nThe column NameOfTheColumn already exists in this table\n:::\n\nTable column names must be unique. This error appears when you're attempting to add a column to a table, like for instance:\n\nTable = { Names = [\"Anna\", \"Kate\"] }\nTable.Names = \\[\"Other\", \"Names\"]\n\nYou need to choose another name for your new column:\n\n```deci live\nTable = { Names = [\"Anna\", \"Kate\"] }\nTable.NewNames = [\"Other\", \"Names\"]\n==> [ 'Other', 'Names' ]\n```\n\n## Syntax error\n\n:::caution `syntax-error`\nSyntax Error\n:::\n\nThe calculation you wrote is not valid in the language.\n\nYou may have miss-spelled something, or even tried to insert data in a way that is not supported yet:\n\nFinal Cost = 8000 €\nFinal_Cost = 8000 €\n\ndoesn't work because variables for now can't use spaces, symbols, and they are case sensitive.\n\n1==2 ? 10 : 20",
    "metadata": { "source": "docs/basic-concepts/language-errors.md" }
  },
  "84": {
    "pageContent": "Final Cost = 8000 €\nFinal_Cost = 8000 €\n\ndoesn't work because variables for now can't use spaces, symbols, and they are case sensitive.\n\n1==2 ? 10 : 20\n\ndoesn't work because that is not the right syntax for an `if.. then.. else` statement.\n\n```deci live\nif 1==2 then 10 else 20\n==> 20\n```\n\nOr you might have inputted data in a way we don't support (**yet**)\n\nmoney = 8,000 $\ndinheiro = 8.000,00 €\nquid = £8,000.00\n\nThe correct calculation would be:\n\n```deci live\nmoney = 8000 $\ndinheiro = 800000 €\nquid = 800000 £\n==> 800000 £\n```\n\n## Duplicated name\n\n:::caution `duplicated-name`\nThis name is already being used. You cannot have duplicated names\n:::\n\nYou named two variables with the same name. One of the biggest advantages of Decipad is how descriptive it is. Your reader will probably feel like they can truly understand your thought process.",
    "metadata": { "source": "docs/basic-concepts/language-errors.md" }
  },
  "85": {
    "pageContent": "You named two variables with the same name. One of the biggest advantages of Decipad is how descriptive it is. Your reader will probably feel like they can truly understand your thought process.\n\nA big part of that is the name you give to your calculations. So, while in a hurry you might just want to call everything `Monies` or `Funds`, which makes it quite confusing to those reading.\n\nSo we require you to use descriptive names for your variables, to make your notebooks easier to understand.\n\n```deci live\nCash = 100 $\nCoffee = 5 $\nCash = Cash - Coffee\n==> The \"Cash\" name is already taken. It has been either defined elsewhere or is a language constant.\n```\n\nYou can fix it by providing descriptive variable names:\n\n```deci live\nPocketCash = 100 $\nCoffee = 5 $\nLeftoverCashAfterCoffee = PocketCash - Coffee\n==> 95 $\n```\n\n## Missing formula\n\n:::caution `missing-formula`\nThe formula MyFormula() does not exist\n:::",
    "metadata": { "source": "docs/basic-concepts/language-errors.md" }
  },
  "86": {
    "pageContent": "```deci live\nPocketCash = 100 $\nCoffee = 5 $\nLeftoverCashAfterCoffee = PocketCash - Coffee\n==> 95 $\n```\n\n## Missing formula\n\n:::caution `missing-formula`\nThe formula MyFormula() does not exist\n:::\n\nYou attempted to call a formula that isn't available. It might be just a typo, or you forgot to add a custom formula of your own.\n\n```deci live\nMyFormula(1)\n==> The formula MyFormula() does not exist\n```\n\nYou can fix it by creating the formula:\n\n```deci live\nMyFormula(X) = X + 1\nMyFormula(1)\n==> 2\n```",
    "metadata": { "source": "docs/basic-concepts/language-errors.md" }
  },
  "87": {
    "pageContent": "---\nsidebar_position: 9\n---\n\n# Define a Unit\n\n## Understanding units\n\nUnits can be simple, like in `4 apples`.\n\nYet, sometimes you need to express units in regards to another unit.\n\nFor example, miles per hour is a speed expressing the number of miles travelled in exactly one hour.\n\n```deci live\n40 miles/hour\n==> 40 miles per hour\n```\n\nDecipad will simplify units for you when possible:\n\n```deci live\nSpeed = 40 miles/hour\nDistance = Speed * 4 hours\n==> 160 miles\n```\n\n> Note: in the example above we're using variables to hold values.\n> To declare a variable and assign it a value you can type `variable_name = value`.\n\nThe same goes for division:\n\n```deci live\nDistance = 40 miles\nDuration = 2 hours\nSpeed = Distance / Duration\n==> 20 miles per hour\n```\n\n## Converting between units\n\n### Simple units\n\nDecipad understands some basic units. To convert between them you can use the `in` directive like this:\n\n```deci live\n3 kmeters in miles\n==> 1.8(641135767120019088523025530899546647578143) miles\n```",
    "metadata": { "source": "docs/basic-concepts/units.md" }
  },
  "88": {
    "pageContent": "Decipad understands some basic units. To convert between them you can use the `in` directive like this:\n\n```deci live\n3 kmeters in miles\n==> 1.8(641135767120019088523025530899546647578143) miles\n```\n\n```deci live\n2 atm in Pa\n==> 202650 Pa\n```\n\nSince Decipad understands unit multipliers (`deca` `mili`, `centi`, `h`, `k`), you can use them as unit prefixes:\n\n```deci live\n1 decimetre in centimetre\n==> 10 centimetres\n```\n\n### Complex units\n\nYou can also convert more complex units. For instance, you may have the number of bananas per unit of area, and you wish to convert to the number of bananas per another unit of area:\n\n```deci live\n10 bananas/meter^2 in bananas/yard^2\n==> 8.3612 bananas·yard⁻²\n```\n\nOr, with more known units:\n\n```deci live\n4184 joules/hour in calories/day\n==> 24000 calories per day\n```\n\n### Expanding and contracting units",
    "metadata": { "source": "docs/basic-concepts/units.md" }
  },
  "89": {
    "pageContent": "Or, with more known units:\n\n```deci live\n4184 joules/hour in calories/day\n==> 24000 calories per day\n```\n\n### Expanding and contracting units\n\nDecipad can contract and expand units automatically. For instance, pressure is force divided by area. So Decipad understands this and tries to do the right thing when you mix these units in conversions:\n\n```deci live\n30 newtons/m2 in bars\n==> 0.0003 bars\n```\n\n```deci live\n30 bars in newton/m2\n==> 3000000 N/m²\n```\n\nOr in operations:\n\n```deci live\n3 bar + 13 newton/inch^2\n==> 206.548 N·inch⁻²\n```\n\nDecipad will even auto-convert units when you need the same units for some non-numeric operations:\n\n```deci live\ncat([1 meters, 2], [3 centimeters, 4])\n==> [ 1 meters, 2 meters, 0.03 meters, 0.04 meters ]\n```\n\n### Conversion factors\n\nIn Decipad the following\n\n```deci live\nBolt = 44.72 kmeter/hour in meter/sec\n==> 12.4(2) meters per sec\n```\n\nis the same as",
    "metadata": { "source": "docs/basic-concepts/units.md" }
  },
  "90": {
    "pageContent": "### Conversion factors\n\nIn Decipad the following\n\n```deci live\nBolt = 44.72 kmeter/hour in meter/sec\n==> 12.4(2) meters per sec\n```\n\nis the same as\n\n```deci live\nSpeed = 44.72\nHoursToSec = 3600\nSpeedInSeconds = Speed / HoursToSec\nKmToMeters = 1000\nSpeedInMetersSecond = SpeedInSeconds * KmToMeters\n==> 12.4(2)\n```\n\n### Creating your own units\n\nWe don't support all units. However, you can create your own:\n\n```deci live\nSpeedOfSound = 1234.8 km/h\nBolt = 44.72 km/hour\nceil(SpeedOfSound in Bolt)\n==> 28 Bolts\n```\n\n### Proportions\n\nSimplified units can end up as a proportion, for example:\n\n```deci live\n45 sec/minute\n==> 0.75\n```\n\nYou can even use the unit simplifier for numbers.\n\nSchool children are often asked how many tens, or how many ones in a number:\n\n```deci live\nNumber = 23\nHowManyTens = round(Number in 10)\n==> 2\n```\n\n```deci live\nNumber = 23\nHowManyTens = round(Number in 10)\nHowManyOnes = Number mod 10\n==> 3\n```\n\n## Custom conversions",
    "metadata": { "source": "docs/basic-concepts/units.md" }
  },
  "91": {
    "pageContent": "```deci live\nNumber = 23\nHowManyTens = round(Number in 10)\n==> 2\n```\n\n```deci live\nNumber = 23\nHowManyTens = round(Number in 10)\nHowManyOnes = Number mod 10\n==> 3\n```\n\n## Custom conversions\n\nAn interesting aspect of how units work in Deci is that you can define your units and customize conversions according to your needs.\n\nFor instance, in Decipad a cup is equivalent to 0.25 litres, which is the standard UK metric:\n\n```deci live\n1 cup in L\n==> 0.25 L\n```\n\nBut different countries can have different cup sizes, so you can define a custom unit to use in conversions as you wish:\n\n```deci live\nFlour = 0.75 L\nMyCup = 0.2 L\nFlour in MyCup\n==> 3.75 MyCups\n```\n\nThis also means that you can create your custom units:\n\n```deci live\nSugar = 1 cup\nGlass = 0.33 L\nSugar in Glass\n==> 0.(75) Glasses\n```\n\n## Unit Relations\n\nBesides a quantity, units can also have a quality.\n\nFor instance, `1 kilogram of flour` and `30 grams of sugar` are both represented by units of mass with different qualities `flour` and `sugar`.",
    "metadata": { "source": "docs/basic-concepts/units.md" }
  },
  "92": {
    "pageContent": "Besides a quantity, units can also have a quality.\n\nFor instance, `1 kilogram of flour` and `30 grams of sugar` are both represented by units of mass with different qualities `flour` and `sugar`.\n\nYou can define **Qualities** with the keyword `of`.\n\nAn example will make things easier to grasp:\n\n```deci live\nflour = 2 kg of flour\nbutter = 150 g of butter\n\nratio = butter / flour\n==> 75 g of butter/kg of flour\n```\n\nWith qualities, you are able to express data relations in a more realistic way. On our example you can clearly see that for every `kg of flour`you will have `75 g of butter`. Awesome right?\n\nHere's another example:\n\n```deci live\nconstructionIndex = 1.6 meters^2 of usefularea / meters^2 of land\nterrain = 600 meters^2 of land\n\nbuildingArea = constructionIndex * terrain\n==> 960 meters² of usefularea\n```\n\n### Supported units\n\n[Here is a list of all the units Decipad knows](/docs/basic-concepts/supported-units).",
    "metadata": { "source": "docs/basic-concepts/units.md" }
  },
  "93": {
    "pageContent": "---\nsidebar_position: 311\n---\n\n# Define a Language Table\n\nA table is a set of values indexed by name. You can define a table in the UI and on the language.\n\n```deci live\nMyTable = {\n  A = [1, 2, 3]\n  B = [4, 5, 6]\n}\n==> {\n  A = [ 1, 2, 3 ],\n  B = [ 4, 5, 6 ]\n}\n```\n\n## Units of columns\n\nHere, each column is a list with the same length. As with lists, you can specify the units of a given column:\n\n```deci live\nMyTable = {\n  A = [1, 2, 3] bananas\n  B = [4, 5, 6] oranges\n}\n==> {\n  A = [ 1 bananas, 2 bananas, 3 bananas ],\n  B = [ 4 oranges, 5 oranges, 6 oranges ]\n}\n```\n\n## Columns with ranges\n\nYou can also declare a column like this:\n\n```deci live\nMyTable = {\n  ArrivalDate = [date(2022-02-20) through date(2022-02-24) by day]\n}\n==> {\n  ArrivalDate = [ day 2022-02-20, day 2022-02-21, day 2022-02-22, day 2022-02-23, day 2022-02-24 ]\n}\n```\n\n## Columns with calculations\n\nInstead of manually inputting values, each column's cell can be based on the outputs of other cells:",
    "metadata": { "source": "docs/advanced-concepts/language-tables.md" }
  },
  "94": {
    "pageContent": "## Columns with calculations\n\nInstead of manually inputting values, each column's cell can be based on the outputs of other cells:\n\n```deci live\nMyTable = {\n  ArrivalDate = [date(2022-02-20) through date(2022-02-24) by day]\n  DepartureDate = ArrivalDate + 7 days\n}\n==> {\n  ArrivalDate = [ day 2022-02-20, day 2022-02-21, day 2022-02-22, day 2022-02-23, day 2022-02-24 ],\n  DepartureDate = [ day 2022-02-27, day 2022-02-28, day 2022-03-01, day 2022-03-02, day 2022-03-03 ]\n}\n```\n\n## Using columns as a whole\n\nSometimes, when deriving a column from another with an expression, you might want to use the whole column at once instead of doing your calculations on a row-by-row basis. Like when you want to know the maximum of a column:\n\n```deci live\nTable = {\n  TestResults = [1, 2, 0, -3]\n  ComparedToMax = TestResults - max(Table.TestResults)\n}\n==> {\n  TestResults = [ 1, 2, 0, -3 ],\n  ComparedToMax = [ -1, 0, -2, -5 ]\n}\n```\n\nOr analyze changes to your profits:",
    "metadata": { "source": "docs/advanced-concepts/language-tables.md" }
  },
  "95": {
    "pageContent": "Or analyze changes to your profits:\n\n```deci live\n  InitialProfit = 500\n  Table = {\n    Months = [date(2020-01) through date(2020-04) by month]\n    Profit = [InitialProfit, 300, 125, 230] GBP\n    RelativeChangeInProfit = stepgrowth(Table.Profit)\n    PercentOfProfit = round(Profit / total(Table.Profit) in 1/100)\n  }\n==> {\n  Months = [ month 2020-01, month 2020-02, month 2020-03, month 2020-04 ],\n  Profit = [ 500 £, 300 £, 125 £, 230 £ ],\n  RelativeChangeInProfit = [ 500 £, -200 £, -175 £, 105 £ ],\n  PercentOfProfit = [ 43, 26, 11, 20 ]\n}\n```\n\n## Using previous values\n\nYou can access previous column values by using the word `previous` and providing a value for the first cell, like this:",
    "metadata": { "source": "docs/advanced-concepts/language-tables.md" }
  },
  "96": {
    "pageContent": "## Using previous values\n\nYou can access previous column values by using the word `previous` and providing a value for the first cell, like this:\n\n```deci live\nHarvest = {\n  Date = [date(2022-02-20) through date(2022-03-05) by day]\n  Oranges = [10 oranges, 15, 20, 9, 4, 54, 23, 45, 53, 63, 54, 12, 0, 1],\n  Count = previous(0) + oranges\n}\n==> {\n  Date = [ day 2022-02-20, day 2022-02-21, day 2022-02-22, day 2022-02-23, day 2022-02-24, day 2022-02-25, day 2022-02-26, day 2022-02-27, day 2022-02-28, day 2022-03-01, day 2022-03-02, day 2022-03-03, day 2022-03-04, day 2022-03-05 ],\n  Oranges = [ 10 oranges, 15 oranges, 20 oranges, 9 oranges, 4 oranges, 54 oranges, 23 oranges, 45 oranges, 53 oranges, 63 oranges, 54 oranges, 12 oranges, 0 oranges, 1 oranges ],\n  Count = [ 1 oranges, 2 oranges, 3 oranges, 4 oranges, 5 oranges, 6 oranges, 7 oranges, 8 oranges, 9 oranges, 10 oranges, 11 oranges, 12 oranges, 13 oranges, 14 oranges ]\n}\n```\n\n## Access columns\n\nYou can access the table columns individually:",
    "metadata": { "source": "docs/advanced-concepts/language-tables.md" }
  },
  "97": {
    "pageContent": "## Access columns\n\nYou can access the table columns individually:\n\n```deci live\nTable = {\n  A = [1, 2, 3] bananas\n  B = [4, 5, 6] oranges\n}\n\nTable.B\n==> [ 4 oranges, 5 oranges, 6 oranges ]\n```\n\nYou can then use them as lists:\n\n```deci live\nTable = {\n  A = [1, 2, 3] bananas\n  B = [4, 5, 6] oranges\n}\n\nTable.A / Table.B\n==> [ 0.25 bananas per orange, 0.4 bananas per orange, 0.5 bananas per orange ]\n```\n\nEven inside your table, you can refer to its previous columns, if you need to aggregate them.\n\n```deci live\nTable = {\n  A = [1, 2, 3] bananas\n  AverageBananas = total(Table.A) / len(Table.A)\n}\n==> {\n  A = [ 1 bananas, 2 bananas, 3 bananas ],\n  AverageBananas = [ 2 bananas, 2 bananas, 2 bananas ]\n}\n```\n\n## Add columns\n\nAdd new columns to a defined table with `.` followed by their name. Their sizes must match the existing table columns.\n\n```deci live\n MyTable = {\n   A = [1, 2, 3]\n   B = [4, 5, 6]\n }\n MyTable.C = [7, 8, 9]\n MyTable\n==> {\n  A = [ 1, 2, 3 ],\n  B = [ 4, 5, 6 ],\n  C = [ 7, 8, 9 ]\n}\n```\n\n## Index column",
    "metadata": { "source": "docs/advanced-concepts/language-tables.md" }
  },
  "98": {
    "pageContent": "```deci live\n MyTable = {\n   A = [1, 2, 3]\n   B = [4, 5, 6]\n }\n MyTable.C = [7, 8, 9]\n MyTable\n==> {\n  A = [ 1, 2, 3 ],\n  B = [ 4, 5, 6 ],\n  C = [ 7, 8, 9 ]\n}\n```\n\n## Index column\n\nYou can use the first column as an index for the row by using cells of text:\n\n```deci live\nFlights = {\n  Number = [\"TP123\", \"BA456\", \"EJ789\"]\n  PassengerCount = [100, 150, 200]\n}\n==> {\n  Number = [ 'TP123', 'BA456', 'EJ789' ],\n  PassengerCount = [ 100, 150, 200 ]\n}\n```\n\nWhen you extract a column, it remembers the original index:\n\n```deci live\nFlights = {\n  Number = [\"TP123\", \"BA456\", \"EJ789\"]\n  PassengerCount = [100, 150, 200]\n}\n\nFlights.PassengerCount\n==> [ 100, 150, 200 ]\n```\n\nYou can still do operations on that column, and it will still remember the original index:\n\n```deci live\nFlights = {\n  Number = [\"TP123\", \"BA456\", \"EJ789\"]\n  PassengerCount = [100, 150, 200]\n}\n\nFlights.PassengerCount - 100\n==> [ 0, 50, 100 ]\n```\n\n## Functions on tables",
    "metadata": { "source": "docs/advanced-concepts/language-tables.md" }
  },
  "99": {
    "pageContent": "```deci live\nFlights = {\n  Number = [\"TP123\", \"BA456\", \"EJ789\"]\n  PassengerCount = [100, 150, 200]\n}\n\nFlights.PassengerCount - 100\n==> [ 0, 50, 100 ]\n```\n\n## Functions on tables\n\n[Here is a list of all the functions that work on tables](/docs/formulas/formulas-for-tables).",
    "metadata": { "source": "docs/advanced-concepts/language-tables.md" }
  },
  "100": {
    "pageContent": "---\nsidebar_position: 8\n---\n\n# Define a List\n\nLists help us organize two-dimensional data.\n\nCreate lists by placing elements inside square brackets (`[]`):\n\n```deci live\n[1, 2, 3, 4]\n==> [ 1, 2, 3, 4 ]\n```\n\nA list can contain numbers (with or without units):\n\n```deci live\n[2 oranges, 4 oranges, 6 oranges]\n==> [ 2 oranges, 4 oranges, 6 oranges ]\n```\n\nDates:\n\n```deci live\n[date(2020), date(2021), date(2022)]\n==> [ year 2020, year 2021, year 2022 ]\n```\n\nText strings:\n\n```deci live\n[\"Hello\", \"World\", \"!\"]\n==> [ 'Hello', 'World', '!' ]\n```\n\nOr even booleans:\n\n```deci live\n[true, false, false]\n==> [ true, false, false ]\n```\n\n## A list must be coherent\n\nLists cannot contain different types of elements. Here are some examples of non-valid lists:\n\n```deci live\n[true, \"that\"]\n==> This operation requires a boolean and a string was entered\n```\n\nUnits on lists must be consistent:\n\n```deci live\n[1 orange, 2 pears]\n==> This operation requires compatible units\n```\n\n## Creating lists from sequences",
    "metadata": { "source": "docs/basic-concepts/lists.md" }
  },
  "101": {
    "pageContent": "Units on lists must be consistent:\n\n```deci live\n[1 orange, 2 pears]\n==> This operation requires compatible units\n```\n\n## Creating lists from sequences\n\nCreate a list by specifying a [sequence](/docs/advanced-concepts/sequences):\n\n```deci live\n[1 .. 10 by 2]\n==> [ 1, 3, 5, 7, 9 ]\n```\n\n## List Operations\n\nYou can apply an arithmetic operator to lists (`+`, `-`, `*`, `/`, etc.):\n\n```deci live\n[1, 2, 3] + 1\n==> [ 2, 3, 4 ]\n```\n\n```deci live\n10 / [1, 2, 5]\n==> [ 10, 5, 2 ]\n```\n\nIf you have two lists you can operate on each corresponding item like this:\n\n```deci live\n[1, 2, 3] * [4, 5, 6]\n==> [ 4, 10, 18 ]\n```\n\n> This only works if both lists have the same number of elements.\n\nYou can also operate on lists with dates:\n\n```deci live\n[date(2021-01), date(2021-02), date(2021-03)] + 1 year + 1 month\n==> [ month 2022-02, month 2022-03, month 2022-04 ]\n```\n\nOr strings:\n\n```deci live\n[\"cookies\", \"pizzas\", \"tacos\"] + \" are delicious\"\n==> [ 'cookies are delicious', 'pizzas are delicious', 'tacos are delicious' ]\n```",
    "metadata": { "source": "docs/basic-concepts/lists.md" }
  },
  "102": {
    "pageContent": "Or strings:\n\n```deci live\n[\"cookies\", \"pizzas\", \"tacos\"] + \" are delicious\"\n==> [ 'cookies are delicious', 'pizzas are delicious', 'tacos are delicious' ]\n```\n\nOr even using the `not` boolean operator:\n\n```deci live\n![true, false, true]\n==> [ false, true, false ]\n```\n\n## Functions on lists\n\n[Here is a list of all the functions that work on lists](/docs/formulas/formulas-for-lists).",
    "metadata": { "source": "docs/basic-concepts/lists.md" }
  },
  "103": {
    "pageContent": "---\nsidebar_position: 11\ndraft: true\n---\n\n# Create a Chart\n\n:::caution `Experimental Feature`\nCharts are still in development and are available to everyone to experiment with.\n:::\n\n## Add a Chart\n\n1.  Type `/` on any paragraph and select **Chart**.\n2.  Make sure you have the data you want to plot represented on table with at least 2 columns.\n3.  Connect you chart block to your table data by selecting the table name and by choosing one of the columns for the horizontal values and another for the vertical's.\n\nEach time your table is updated, the chart will be automatically refreshed.",
    "metadata": { "source": "docs/basic-concepts/charts.md" }
  },
  "104": {
    "pageContent": "---\nsidebar_position: 11\n---\n\n# Percentages\n\nPercentages work with calculation, tables and widgets.\n\n## Define any number as a percentage\n\nUse the `%` symbol with any number to tell Decipad that number is a percentage.\n![Percentages](./img/Percentages6.png)\n\n## Turn a calculation result into a percentage\n\nTransform any result into a percentage using **in %**\n\n![Percentages](./img/Percentages5.png)\n\nOn this example, we are checking how much of the budget was spent and getting that result in a percentage format using **in %**.\n\n## Use Percentages on Calculations\n\nPercentages work natively with any operation.\n\n**Apply a percentage** with multiplication. **10%** of **5** is **0.5**.\n![Percentages](./img/Percentages1.png)\n\n**Add a percentage** with addition. Increasing **5**, **10%** is **5.5**.\n![Percentages](./img/Percentages2.png)\n\n**Subtract a percentage** with subtraction. Reducing **5**, **10%** is **4.5**.\n![Percentages](./img/Percentages3.png)\n\n**Combine percentages** with addition or subtraction.",
    "metadata": { "source": "docs/basic-concepts/percentages.md" }
  },
  "105": {
    "pageContent": "**Subtract a percentage** with subtraction. Reducing **5**, **10%** is **4.5**.\n![Percentages](./img/Percentages3.png)\n\n**Combine percentages** with addition or subtraction.\n\n![Percentages](./img/Percentages4.png)\n\n### Define percentages on a column\n\n**To define a column with percentages**, change the column type and specify `%` in its custom field.\n![Percentages](./img/Percentages8.png)\n\nOn this example, we are using the column `Amount` to specify the `Budget` as a percentage.\n\n### Calculate the percentage for each item in a column\n\n**To calculate the percentage value of each row item**. Add a new column that divides your column by its total amount.\n\n![Percentages](./img/Percentages7.png)\n\nOn this example, we are using the column `Percent` to check the percentage of each `Expense`.",
    "metadata": { "source": "docs/basic-concepts/percentages.md" }
  },
  "106": {
    "pageContent": "---\nsidebar_position: 7\nsidebar_class_name: hide-from-sidebar\ndraft: true\n---\n\n# Define a Category\n\n:::caution `Experimental Feature`\nCategories are still in development and are available to everyone to experiment with.\n:::\n\nCategories are collections of elements that share common properties. They are defined with the keyword `categories` and wrapped by `[]`. Each category is separated using `,`:\n\n```deci live\nInternetProvider = categories[\"AV&T\", \"Zerivon\"]\n==> [ 'AV&T', 'Zerivon' ]\n```\n\n## Lists with categories\n\nLists can be organized with categories. For example, the list `Cost` with the category `InternetProvider` to define a monthly price for each internet provider:\n\n```deci live\nInternetProvider = categories[\"AV&T\", \"Zerivon\"]\nCost[InternetProvider] = 100$/month\n==> [ 100 $ per month, 100 $ per month ]\n```\n\nCategories can be reused across multiple lists. For instance, the category `InternetProvider` to define the lists `Cost` and `PhonePlan`:",
    "metadata": { "source": "docs/basic-concepts/categories.md" }
  },
  "107": {
    "pageContent": "Categories can be reused across multiple lists. For instance, the category `InternetProvider` to define the lists `Cost` and `PhonePlan`:\n\n```deci live\nInternetProvider = categories[\"AV&T\", \"Zerivon\"]\nCost[InternetProvider] = 100$/month\nPhonePlan[InternetProvider] = [true, false]\n==> [ true, false ]\n```\n\n### Operations\n\nAll operations applied to a categorized list are replicated. For example, to find the yearly subscription amount of each internet provider:\n\n```deci live\nInternetProvider = categories[\"AV&T\", \"Zerivon\"]\nCost[InternetProvider] = 100$/month\nCost * (12 months)\n==> [ 1200 $, 1200 $ ]\n```\n\n### Access\n\nSubsets of categorized lists are accessed with a condition. For example, the `Cost` of subscribing 2 years of internet with `AV&T`:\n\n```deci live\nInternetProvider = categories[\"AV&T\", \"Zerivon\"]\nCost[InternetProvider] = 100$/month\nCost[InternetProvider == \"AV&T\"] * (24 months)\n==> [ 2400 $ ]\n```",
    "metadata": { "source": "docs/basic-concepts/categories.md" }
  },
  "108": {
    "pageContent": "---\nsidebar_position: 1\n---\n\n# Name your values\n\nName your data with variables.\n\nThey improve readability of notebooks with a layer of abstraction.\n\n## Declaration\n\nDeclare a variable with the `=` operator:\n\n```deci live\nOfficeSpace = 120 meters^2\n==> 120 meters²\n```\n\n> Variables can contain letters from a to z, upper or lower case. They can't contain spaces or special characters except numbers, underscores (\"\\_\") or emojis.\n\n## Referencing\n\nReference variables on calculation blocks:\n\n```deci live\nOfficeSpace = 120 m^2\nOfficePrice = 50 $/m^2/month\nOfficeCost = OfficeSpace * OfficePrice\n==> 6000 $ per month\n```\n\n## Redefinition\n\nExisting variables can't be redefined after declaration:\n\n```deci live\nBeans = 1 bean\nBeans = Beans + 1\n==> The \"Beans\" name is already taken. It has been either defined elsewhere or is a language constant.\n```\n\nA simple solution is declaring a new variable:\n\n```deci live\nBeans = 1 bean\nMoreBeans = beans + 1\n==> 2 beans\n```\n\n## Constants",
    "metadata": { "source": "docs/basic-concepts/variables.md" }
  },
  "109": {
    "pageContent": "A simple solution is declaring a new variable:\n\n```deci live\nBeans = 1 bean\nMoreBeans = beans + 1\n==> 2 beans\n```\n\n## Constants\n\nThe Language supports some contants by default such as π (pi) and e (Euler's numbers).",
    "metadata": { "source": "docs/basic-concepts/variables.md" }
  },
  "110": {
    "pageContent": "---\nsidebar_position: 5\n---\n\n# Define a Boolean\n\nOn/Off, 1/0, True/False. Lots of data information comes in pairs. We call this data type a boolean. For simplicity a boolean value can either be _true_ or _false_, but you can use it to define any type of data pair you want.\n\n## Boolean values\n\nThe keywords `true` and `false` are a special on the Decipad Language because they represent a boolean value. Take a look at these examples:\n\n**Example 1**:\n\n```deci live\ntrue\n==> true\n```\n\n```deci live\nfalse\n==> false\n```\n\nWhen you use the keyworkds `true` or `false` they will return themselves since they represent a value.\n\n**Example 2**:\n\n```deci live\nOn = true\n==> true\n```\n\n```deci live\nOff = false\n==> false\n```\n\nThe next time you need to say that something is `On` or `Off` you can use a boolean data type!\n\n## Comparing values\n\nCompare two values like this:\n\n```deci live\n3 > 2\n==> true\n```\n\nIn this example, the comparison result is `true`.\n\nThe list of available comparators is the following:",
    "metadata": { "source": "docs/basic-concepts/booleans.md" }
  },
  "111": {
    "pageContent": "## Comparing values\n\nCompare two values like this:\n\n```deci live\n3 > 2\n==> true\n```\n\nIn this example, the comparison result is `true`.\n\nThe list of available comparators is the following:\n\n- `>`: \"greater than\"\n- `<`: \"less than\"\n- `>=`: \"greater or equal\"\n- `<=`: \"less or equal\"\n- `==`: \"equals\"\n- `!=`: \"different\"\n\n## Parenthesis\n\nUse parenthesis to chain operators and define priorities\n\n```deci live\n10 bananas != (20 bananas / 2)\n==> false\n```\n\n> Parentheses are used to ensure that the `/` operation on the right side of the `!=` is performed **before** the evaluation of the `!=` itself.\n\n## Formulas on booleans\n\n[Here is a list of all the functions that work on booleans](/docs/formulas/formulas-for-booleans).",
    "metadata": { "source": "docs/basic-concepts/booleans.md" }
  },
  "112": {
    "pageContent": "---\nsidebar_position: 550\n---\n\n# Clearing Cache and Cookies\n\nIf Decipad isn't loading properly, you can try to clear your browser cache and cookies. Be mindful that you will lose your local changes if they were only stored locally and not uploaded to our server, this is common when your internet connection isn't stable.\n\n### Chrome\n\nVisit [https://app.decipad.com/api/clear](https://app.decipad.com/api/clear) and press _Click here to continue_.\n\nAlternativly, you can clear them manually by doing:\n\n1.  Press `cmd + shift + R` for Mac or `ctrl + F5` for Windows or Linux\n2.  Click the `Lock Icon` next to you url bar\n3.  Click `Cookies`\n4.  Click `Remove` until you've cleared the allow list and then click `Done`\n\n### Safari\n\n1.  Press `cmd + ,` and select `Privacy`\n2.  Click `Manage Website Data...`\n3.  Search for `Decipad`, select it and click `Remove`\n\n### Firefox\n\nVisit [https://app.decipad.com/api/clear](https://app.decipad.com/api/clear) and press _Click here to continue_.",
    "metadata": { "source": "docs/help/clear-cache-cookies.md" }
  },
  "113": {
    "pageContent": "### Firefox\n\nVisit [https://app.decipad.com/api/clear](https://app.decipad.com/api/clear) and press _Click here to continue_.\n\nAlternativly, you can clear them manually by doing:\n\n1.  Click the `Lock Icon` next to you url bar\n2.  Click `Clear Cookies and Site Data`\n3.  Click `Remove`",
    "metadata": { "source": "docs/help/clear-cache-cookies.md" }
  },
  "114": {
    "pageContent": "---\nsidebar_position: 560\n---\n\n# Retired Feature\n\nOn Decipad, we are always improving and experimenting with new features.\n\nOur goal is to give you superpowers when it comes to numbers, and to make them fun and intuitive.\nThis sometimes means, retiring old features to make space for new and better ones.\n\n## Expanding Tables\n\nExpanding tables would let you take an original language table and reuse its columns on a new one.\nYou can achieve the same result by creating a new table and adding columns that match the columns you want to copy.\n\n#### Retired Version\n\n![Expanding Tables Old](./img/ExpandingTablesOld.png)\n\n#### New Version\n\n1.  **Create a new table** and fill in your old data\n2.  **Add columns** and assign the columns you want to copy\n\n![Expanding Tables New](./img/ExpandingTablesNew.png)\n\n## Select() Formula",
    "metadata": { "source": "docs/help/retired-feature/retired-feature.md" }
  },
  "115": {
    "pageContent": "#### New Version\n\n1.  **Create a new table** and fill in your old data\n2.  **Add columns** and assign the columns you want to copy\n\n![Expanding Tables New](./img/ExpandingTablesNew.png)\n\n## Select() Formula\n\nThe select() formula would let you create a copy of a table with some o of the original columns.\nYou can achieve the same result by creating a new table and adding columns that match the columns you want to copy.\n\n#### Retired Version\n\n![Select Formula New](./img/SelectFormulaNew.png)\n\n#### New Version\n\n1.  **Create a new table** and fill in your old data\n2.  **Add columns** and assign the columns you want to copy\n    ![Select Formula Old](./img/SelectFormulaOld.png)\n\n## Splitby() Formula\n\nThe splitby() formula would let you organize a language table by the labels on a column.\nYou can achieve the same result with data views.\n\n#### Retired Version\n\n![Splitby Formula Old](./img/SplitbyOld.png)\n\n#### New Version\n\n1.  **Create a new table** and fill in your old data\n2.  **Create a view** to filter",
    "metadata": { "source": "docs/help/retired-feature/retired-feature.md" }
  },
  "116": {
    "pageContent": "#### Retired Version\n\n![Splitby Formula Old](./img/SplitbyOld.png)\n\n#### New Version\n\n1.  **Create a new table** and fill in your old data\n2.  **Create a view** to filter\n\n![Splitby Formula New](./img/SplitbyNew.gif)\n\n## Contact Support\n\n- **Via Chat:** Click the **?** on the bottom right of your notebook to talk to the team\n- **Via Email:** [support@decipad.com](mailto:support@decipad.com)\n- **On Discord:** Join our discord [here](https://discord.gg/CUtKEd3rBn)",
    "metadata": { "source": "docs/help/retired-feature/retired-feature.md" }
  },
  "117": {
    "pageContent": "---\nsidebar_position: 12\n---\n\n# Formulas for Table Columns\n\nYou may want to reduce the number of columns to a given value.\n\n### Get a Table column\n\nTo select a table column, just type the table name on a calculation, folowed by a `.` and the column name.\n\n![lookup](./img/lookup1.png)\n\nOn this example, we are selecting the column `Amount` from the table `Expenses`.\n\n## count()\n\nYou may simply want to count number of entries on a list or column:\n\n```deci live\nErrands = [\"make bread\", \"walk dog\", \"do homework\"]\n\ncount(Errands)\n==> 3\n```\n\n## countif()\n\nYou may simply want to count the number of entries that respect a certain condition:\n\n```deci live\nFlights = {\n  Number = [\"TP123\", \"BA456\", \"EJ789\"]\n  PassengerCount = [100, 150, 200]\n}\n\n\ncountif(Flights.PassengerCount > 100)\n==> 2\n```\n\n## sum() / total()\n\nYou may want to sum up an entire column:\n\n```deci live\nFlights = {\n  Number = [\"TP123\", \"BA456\", \"EJ789\"]\n  PassengerCount = [100, 150, 200]\n}\n\nsum(Flights.PassengerCount)\n==> 450\n```",
    "metadata": { "source": "docs/formulas/formulas-for-table-columns.md" }
  },
  "118": {
    "pageContent": "## sum() / total()\n\nYou may want to sum up an entire column:\n\n```deci live\nFlights = {\n  Number = [\"TP123\", \"BA456\", \"EJ789\"]\n  PassengerCount = [100, 150, 200]\n}\n\nsum(Flights.PassengerCount)\n==> 450\n```\n\n> `total` is the name of the function that does exactly the same as `sum`, so you can use that instead.\n\n## sumif()\n\nYou may want to sum up an entire column only for the elements that respect a certain condition:\n\n```deci live\nFlights = {\n  Operator = [\"TP\", \"EJ\", \"BA\", \"TP\"]\n  Number = [\"TP123\", \"BA456\", \"EJ789\", \"TP101\"]\n  PassengerCount = [100, 150, 200, 75]\n}\n\nsumif(Flights.PassengerCount, Flights.Operator == \"TP\")\n==> 175\n```",
    "metadata": { "source": "docs/formulas/formulas-for-table-columns.md" }
  },
  "119": {
    "pageContent": "---\nsidebar_position: 14\n---\n\n# Formulas for Lists\n\nWhen you have a list, you can apply some formulas that are specific to working with lists. Here are some:\n\n## len()\n\nYou can know the number of elements a list has by using the `len` operator.\n\n**Syntax:** `len( List )`\n\n```deci live\nlen([1, 2, 3])\n==> 3\n```\n\n## cat()\n\nAlso, you can join two lists (as long as they have the same type) by using the `cat` formula:\n\n> (`cat` is an abbreviation of `concatenate`).\n\n**Syntax:** `cat( List, List )`\n\n**Alternative Syntax:** `cat( Item, List )`\n\n```deci live\ncat([1, 2, 3], [4, 5, 6])\n==> [ 1, 2, 3, 4, 5, 6 ]\n```\n\nYou can also use this formula to push an element to the end of a list, resulting in a new list:\n\n```deci live\ncat([1, 2, 3], [4])\n==> [ 1, 2, 3, 4 ]\n```\n\n> In Decipad, every operation returns a new value. Here, `cat` returns a new list and leaves the arguments untouched.\n\nOr add an element to the beginning of a list:\n\n```deci live\ncat([1], [2, 3, 4])\n==> [ 1, 2, 3, 4 ]\n```\n\n## first()",
    "metadata": { "source": "docs/formulas/formulas-for-lists.md" }
  },
  "120": {
    "pageContent": "Or add an element to the beginning of a list:\n\n```deci live\ncat([1], [2, 3, 4])\n==> [ 1, 2, 3, 4 ]\n```\n\n## first()\n\nIf you have a list and want to extract the first element, you can use the `first` formula:\n\n**Syntax:** `first( List )`\n\n```deci live\nfirst([1 apples, 2 apples, 3 apples])\n==> 1 apples\n```\n\n## last()\n\nConversely, if you want to extract the last element of a list, you can use the `last` formula:\n\n**Syntax:** `last( List )`\n\n```deci live\nlast([1 apples, 2 apples, 3 apples])\n==> 3 apples\n```\n\n## sort()\n\nYou can generate a new list that contains all the elements in the source list sorted:\n\n**Syntax:** `sort( List )`\n\n```deci live\nsort([date(2021-03), date(2020-12), date(2023-01)])\n==> [ month 2020-12, month 2021-03, month 2023-01 ]\n```\n\n## unique()\n\nYou can generate a new list that contains all the unique elements in the source list sorted:\n\n**Syntax:** `unique( List )`\n\n```deci live\nunique([4 USD, 3 USD, 1 USD, 1 USD, 4 USD, 3 USD, 3 USD])\n==> [ 1 $, 3 $, 4 $ ]\n```\n\n## reverse()",
    "metadata": { "source": "docs/formulas/formulas-for-lists.md" }
  },
  "121": {
    "pageContent": "**Syntax:** `unique( List )`\n\n```deci live\nunique([4 USD, 3 USD, 1 USD, 1 USD, 4 USD, 3 USD, 3 USD])\n==> [ 1 $, 3 $, 4 $ ]\n```\n\n## reverse()\n\nYou can generate a new list that contains all the elements in the source list in reverse order:\n\n**Syntax:** `reverse( List )`\n\n```deci live\nreverse([1 duck, 2 ducks, 3 ducks])\n==> [ 3 ducks, 2 ducks, 1 ducks ]\n```",
    "metadata": { "source": "docs/formulas/formulas-for-lists.md" }
  },
  "122": {
    "pageContent": "---\nsidebar_position: 4\n---\n\n# Create an Advanced Formula\n\nUse `Advanced Formulas` to explore the advanced features of the Decipad Language. <br/>\nThese blocks also allow you create all calculations that normal [formula blocks](<(/docs/getting-started/formulas)>) support.\n\nAdvanced Formulas enable you to:\n\n- [Define custom formulas to reause](/docs/formulas/formulas).\n- [Create `Language Tables`](/docs/advanced-concepts/language-tables).\n- [Define conditions with `match()` and `tiers()`](/docs/advanced-concepts/decision-tables).\n\n## Add an Advanced Formula Block\n\nTo **add ad Advanced Formula block** to your notebook, follow these steps:\n\n1.  Click the `+` button next to an empty line,\n2.  Select **Advanced Formula** from the menu.\n\n## Advanced Formula Anatomy\n\nAdvanced formulas allow you add calculations on the left and get the result on the right.\n\n![Explainer](https://user-images.githubusercontent.com/12210180/198010628-9aa8bda8-d1f9-4b41-b6a6-ccc43b19e9e3.png)\n\n## Create Variables in Advanced Formulas",
    "metadata": { "source": "docs/advanced-concepts/advanced-formulas.md" }
  },
  "123": {
    "pageContent": "![Explainer](https://user-images.githubusercontent.com/12210180/198010628-9aa8bda8-d1f9-4b41-b6a6-ccc43b19e9e3.png)\n\n## Create Variables in Advanced Formulas\n\nVariables are labels for your numbers. They make your calculations easy to follow and let you reference the results of previous calculations.\n\nTo **create a new variable on an Advanced Formula**, follow these steps:\n\n1. Add an Advanced Formula block from the menu.\n2. Write the variable name for your number.\n3. Add an `=` sign next to your name and write your number.\n\nTake a look at this example:\n\n![Example](https://user-images.githubusercontent.com/12210180/198111866-1475915c-bedc-4a08-ae4a-da904cda6d22.png)\n\n**Shopping**, **Discount** and **Total** are variables and **Shopping** and **Discount** are used to calculate your **Total**.\n\n### Variable Name Rules",
    "metadata": { "source": "docs/advanced-concepts/advanced-formulas.md" }
  },
  "124": {
    "pageContent": "**Shopping**, **Discount** and **Total** are variables and **Shopping** and **Discount** are used to calculate your **Total**.\n\n### Variable Name Rules\n\n- Emojis can be used as variable names 😎.\n- Variable names are case-sensitive. For Instance, `Discount` is a different variable from `discount`.\n- Variable names can’t include spaces.\n- Variable names can’t start with a number.\n- Variables names are unique, you can’t assign the same one to different values.\n\n<br />\n\n---\n\n# Continue Exploring:\n\n- For more complex calculations, check out Decipad’s [Built-in Formulas](/docs/formulas)\n- [Create Calculations on Tables](/docs/quick-start/table-calculations)",
    "metadata": { "source": "docs/advanced-concepts/advanced-formulas.md" }
  },
  "125": {
    "pageContent": "---\nsidebar_position: 20\n---\n\n# Formulas for Dates\n\nBuilt-in formulas that operate on dates:\n\n## max()\n\nGets you the maximum date from a list of dates:\n\n```deci live\nmax([date(2050-Jan-01), date(2025-Jun-01)])\n==> day 2050-01-01\n```\n\n## min()\n\nYou can get the maximum date from a list of dates:\n\n```deci live\nmin([date(2050-Jan-01), date(2025-Jun-01)])\n==> day 2025-06-01\n```\n\n## contains()\n\nThis operator gives you the ability to check whether a certain range contains a specific date:\n\n```deci live\nRange = range(date(2050-Jan-01) through date(2050-Dec-31))\nRange contains date(2050-Feb-02 15:30)\n==> true\n```",
    "metadata": { "source": "docs/formulas/formulas-for-dates.md" }
  },
  "126": {
    "pageContent": "---\nsidebar_position: 10\n---\n\n# Formulas for Numbers\n\nDecipad has a collection pre-built formulas that help you work with numbers. <br /> You can use these formulas with [tables](/docs/quick-start/tables), formulas and [Decipad Advanced Formula blocks](/docs/advanced-concepts/advanced-formulas).\n\n## Rounding numbers\n\n### Round a number - round()\n\nThe `round()` formula gives you a rounded version of a number. Optionally, you can specify the number of decimal places.\n\n**Syntax:** `round( Number, Optional Decimal Precision)`\n\n![round formula](./img/ROUND.png)\n\n### Round a number up - roundup() / ceil()\n\nRounds the number to the nearest largest integer or number with the given decimal places.\n\n**Syntax:** `roundup( Number, Optional Decimal Precision )`\n\n**Alternative Syntax:** `ceil( Number, Optional Decimal Precision )`\n\n```deci live\nroundup(2.3)\n==> 3\n```\n\n```deci live\nroundup(5.2345, 2)\n==> 5.24\n```\n\n### Round a number down - rounddown() / floor()",
    "metadata": { "source": "docs/formulas/formulas-for-numbers.md" }
  },
  "127": {
    "pageContent": "**Alternative Syntax:** `ceil( Number, Optional Decimal Precision )`\n\n```deci live\nroundup(2.3)\n==> 3\n```\n\n```deci live\nroundup(5.2345, 2)\n==> 5.24\n```\n\n### Round a number down - rounddown() / floor()\n\nRounds the number to the nearest smallest integer or number with the given decimal places.\n\n**Syntax:** `roundown( Number, Optional Decimal Precision )`\n\n**Alternative Syntax:** `floor( Number, Optional Decimal Precision )`\n\n```deci live\nrounddown(2.9)\n==> 2\n```\n\n```deci live\nrounddown(5.789, 2)\n==> 5.78\n```\n\n## Square root - sqrt()\n\nThe `sqrt()` formula gives you the square root of your number.\n\n**Syntax:** `sqrt( Number )`\n\nTake a look at this example, `3 feet` is the square root of `9 square feet`.\n\n![sqroot formula](./img/SQROOT.png)\n\n## Get an absolute number - abs()\n\nThe `abs()` formula gives you the absolute value of a number. <br /> It is useful when you need to remove the negative sign from a number.\nIf your number is positive or zero, it stays the same. If it's negative, it removes the negative sign.",
    "metadata": { "source": "docs/formulas/formulas-for-numbers.md" }
  },
  "128": {
    "pageContent": "**Syntax:** `abs( Number )`\n\nTake a look at this example, `20$` is the absolute value of `-$20`.\n\n![abs formula](./img/ABS.png)\n\nTake a look at this practical example, where you check how much money you would need to get a positive balance back.\n\n![abs formula](./img/ABS2.png)\n\n## Trignometric formulas\n\n[Trigonometric formulas](https://en.wikipedia.org/wiki/List_of_trigonometric_identities) relate an angle of a righ-angled triangle with the ratios of two side lengths. Decipad supports adians and degrees. These can be used to triangulate distances for example.\n\n### sin() / asin()\n\n```deci live\nsin(90degrees)\n==> 1\n```\n\n```deci live\nasin(1) in degrees\n==> 90.0000 °\n```\n\n### cos() / acos()\n\n```deci live\ncos(2*pi)\n==> 1\n```\n\n```deci live\nacos(1)\n==> 0 rad\n```\n\n### tan() / atan()\n\n```deci live\ntan(45degrees)\n==> 1\n```\n\n```deci live\nround(atan(1) in degrees)\n==> 45 °\n```\n\n## Calculate a factorial - factorial()\n\nCompute factorials with the `factorial()` formula. Factorials are commonly used with probabilities.",
    "metadata": { "source": "docs/formulas/formulas-for-numbers.md" }
  },
  "129": {
    "pageContent": "```deci live\nround(atan(1) in degrees)\n==> 45 °\n```\n\n## Calculate a factorial - factorial()\n\nCompute factorials with the `factorial()` formula. Factorials are commonly used with probabilities.\n\n```deci live\nfactorial(5)\n==> 120\n```\n\n## Natural logarithm - ln()\n\nThe `ln()` formula gives you [the natural logarithmic of a number](https://en.wikipedia.org/wiki/Natural_logarithm).\n\n**Syntax:** `ln( Number )`\n\n```deci live\nln(12)\n==> 2.4849\n```",
    "metadata": { "source": "docs/formulas/formulas-for-numbers.md" }
  },
  "130": {
    "pageContent": "---\nsidebar_position: 331\n---\n\n# Formulas for Correctness\n\nEnsure your notebook is always in a correct state, by double-checking your calculations programmatically.\n\n## Check a condition - assert()\n\nCreates an error in the notebook if the condition is not true\n\n**Syntax:** `assert( Condition )`\n\n```deci live\nledger = 5000 $\nmoneyInBank = 4999$\nassert(ledger == moneyInBank)\n==> User defined pre-condition was not met\n```",
    "metadata": { "source": "docs/formulas/formulas-for-correctness.md" }
  },
  "131": {
    "pageContent": "---\nsidebar_position: 80\nsidebar_class_name: formula-icon\n---\n\n# Formulas\n\nA formula is a block of reusable Decipad language used to perform a set of operations.\n\nDecipad has a series of built-in formulas that you can call. Some of them you've seen, like the `+`, `-`, `*`, and `/` operators, or the comparison operators like `==` or `>=`.\n\nOther formulas include mathematical functions such as `abs` or `ln`.\n\nThis is how you call a formulas in Decipad:\n\n```deci live\nTime = -10 days\nTimeSpan = abs(Time)\n==> 10 days\n```\n\n## Custom formulas\n\nCustom formula allow you to create your dialects inside Decipad.\n\nThey can be defined as follows:\n\n**Syntax:** `CustomFormulaName (first argument, ..., last argument) = you custom expression`\n\nTo illustrate, we will create a formula to determine if a given number is even.\n\n```deci live\neven (n) = n mod 2 == 0\neven(10)\n==> true\n```",
    "metadata": { "source": "docs/formulas/formulas.md" }
  },
  "132": {
    "pageContent": "---\nsidebar_position: 13\ndraft: true\n---\n\n[https://app.decipad.com/n/Cashflow-positive-for-the-month-%3A4tOWuPdwbNCGThNP9VwqE](https://app.decipad.com/n/Cashflow-positive-for-the-month-%3A4tOWuPdwbNCGThNP9VwqE)\n\n## Cashflow positive for the month\n\nFor Financial planning and analysis models you often need to:\n\n- Calculate growth based on previous months\n- Find the point in your model where you break even\n\nYou can achieve this using `lookup`and `previous`.\n\n```deci live\nCashflow = {\n  Month = [date(2023-01), date(2023-02), date(2023-03), date(2023-04), date(2023-05)]\n  Expenses = [500 GBP, 500 GBP, 600 GBP, 700 GBP, 700 GBP]\n  Income = [0 GBP, 400 GBP, 800 GBP, 2000 GBP, 3000 GBP]\n  Profit = Income - Expenses\n}\n==> {\n  Month = [ month 2023-01, month 2023-02, month 2023-03, month 2023-04, month 2023-05 ],\n  Expenses = [ 500 £, 500 £, 600 £, 700 £, 700 £ ],\n  Income = [ 0 £, 400 £, 800 £, 2000 £, 3000 £ ],\n  Profit = [ -500 £, -100 £, 200 £, 1300 £, 2300 £ ]\n}\n```",
    "metadata": { "source": "docs/formulas/lookups.md" }
  },
  "133": {
    "pageContent": "Here's how to find in what month you turn cashflow positive.\n\n```deci live\nCashflow = {\n  Month = [date(2023-01), date(2023-02), date(2023-03), date(2023-04), date(2023-05)]\n  Expenses = [500 GBP, 500 GBP, 600 GBP, 700 GBP, 700 GBP]\n  Income = [0 GBP, 400 GBP, 800 GBP, 2000 GBP, 3000 GBP]\n  Profit = Income - Expenses\n}\n\nlookup(Cashflow, Cashflow.Profit >= 0).Month\n==> month 2023-03\n```\n\n## Break even\n\nSometimes however you need to keep count of profits, or headcount.",
    "metadata": { "source": "docs/formulas/lookups.md" }
  },
  "134": {
    "pageContent": "lookup(Cashflow, Cashflow.Profit >= 0).Month\n==> month 2023-03\n```\n\n## Break even\n\nSometimes however you need to keep count of profits, or headcount.\n\n```deci live\nInitialInvestment = 100 £\nCashflow = {\n  Month = [date(2023-01) .. date(2023-05) by month]\n  Expenses = [500 £, 500 £, 600 £, 700 £, 700 £]\n  Income = [0 £, 400 £, 800 £, 2000 £, 3000 £]\n  Profit = Income - Expenses\n  BankBalance = previous(InitialInvestment) + Profit\n}\n==> {\n  Month = [ month 2023-01, month 2023-02, month 2023-03, month 2023-04, month 2023-05 ],\n  Expenses = [ 500 £, 500 £, 600 £, 700 £, 700 £ ],\n  Income = [ 0 £, 400 £, 800 £, 2000 £, 3000 £ ],\n  Profit = [ -500 £, -100 £, 200 £, 1300 £, 2300 £ ],\n  BankBalance = [ -400 £, -500 £, -300 £, 1000 £, 3300 £ ]\n}\n```\n\nYou can use the `previous` function and find the month when you break even.",
    "metadata": { "source": "docs/formulas/lookups.md" }
  },
  "135": {
    "pageContent": "You can use the `previous` function and find the month when you break even.\n\n```deci live\nInitialInvestment = 100 £\nCashflow = {\n  Month = [date(2023-01) .. date(2023-05) by month]\n  Expenses = [500 £, 500 £, 600 £, 700 £, 700 £]\n  Income = [0 £, 400 £, 800 £, 2000 £, 3000 £]\n  Profit = Income - Expenses\n  BankBalance = previous(InitialInvestment) + Profit\n}\n\nlookup(Cashflow, Cashflow.BankBalance >= 0).Month\n==> month 2023-04\n```\n\nIf you want to calculate how much of a interest free loan or extra investment you need:\n\n```deci live\nInitialInvestment = 100 £\nCashflow = {\n  Month = [date(2023-01) .. date(2023-05) by month]\n  Expenses = [500 £, 500 £, 600 £, 700 £, 700 £]\n  Income = [0 £, 400 £, 800 £, 2000 £, 3000 £]\n  Profit = Income - Expenses\n  BankBalance = previous(InitialInvestment) + Profit\n}\n\nmin(Cashflow.BankBalance) * -1\n==> 500 £\n```",
    "metadata": { "source": "docs/formulas/lookups.md" }
  },
  "136": {
    "pageContent": "---\nsidebar_position: 15\n---\n\n# Formulas for Lists of Numbers\n\n## max()\n\nThis formula gives you the maximum value of a list or table column:\n\n```deci live\nmax([1, 3, 2])\n==> 3\n```\n\n## min()\n\nThis formula gives you the minimum value of a list or table column:\n\n```deci live\nmin([3, 1, 2])\n==> 1\n```\n\n## sum() / total()\n\nThis formula gives you the sum of all numbers in a list or a table column:\n\n```deci live\nmy_table = {\n  column_A = [1, 2, 3]\n  column_B = [4, 5, 6]\n}\n\ntotal(my_table.column_B)\n==> 15\n```\n\n## average() / mean() / avg()\n\nThis formula gives you the mean of a list of numbers:\n\n```deci live\naverage([1, 2, 3, 4])\n==> 2.5\n```\n\n## averageif() / meanif() / avgif()\n\nThis formula gives you the mean of a list of numbers that respect a certain condition:\n\n```deci live\nTable = {\n  A = [1, 2, 3]\n  B = [4, 5, 6]\n}\n\naverageif(Table.A, Table.B < 6)\n==> 1.5\n```\n\n## grow()\n\nThis formula compounds an initial value by a specific rate over any sequence or list of values.",
    "metadata": { "source": "docs/formulas/formulas-for-lists-of-numbers.md" }
  },
  "137": {
    "pageContent": "averageif(Table.A, Table.B < 6)\n==> 1.5\n```\n\n## grow()\n\nThis formula compounds an initial value by a specific rate over any sequence or list of values.\n\n```deci live\nYears = [date(2022), date(2023), date(2024), date(2025)]\n\ngrow(500, 10%, Years)\n==> [ 500, 550, 605, 665.5 ]\n```\n\n## stepgrowth()\n\nThis formula gives you the increments (or decrements) between values in a sequence or list.\n\n```deci live\nBooksRead = {\n  Year = [date(2018), date(2019), date(2020), date(2021)]\n  Total = [15, 12, 25, 20]\n}\n\nstepgrowth(BooksRead.Total)\n==> [ 15, -3, 13, -5 ]\n```\n\n## abs()\n\nCan calculate all the absolute numbers of the numbers contained in a list:\n\n```deci live\nabs([-1, 2, -3])\n==> [ 1, 2, 3 ]\n```",
    "metadata": { "source": "docs/formulas/formulas-for-lists-of-numbers.md" }
  },
  "138": {
    "pageContent": "---\nsidebar_position: 11\n---\n\n# Formulas for Finance\n\nBuilt-in functions that help you explore investments and loans.\n\n## Compound\n\n**Syntax:** `compound( Rate,  Number of Periods)`\n\nThis formula helps you calculate the compound rate of a given `Number of Periods` based on a constant `Rate`.\n\n## Future Value\n\n**Syntax:** `futurevalue( Rate, Number of Periods , Initial Amount )` <br />\n**Alternative Syntax:** `fv( Rate, Number of Periods , Initial Amount )`\n\nThis formula helps you calculate the `Future Value` of an investment based on the total `Number of Periods` (periodic payments, or a single lump sum payment) and `Initial Amount` given a constant interest `Rate`.\n\n## Net Present Value\n\n**Syntax:** `netpresentvalue( Discount Rate, Future Cashflows List or Column )` <br />\n**Alternative Syntax:** `npv( Discount Rate, Future Cashflows List or Column )`\n\nThis formula helps you calculate the `Net Present Value` of an investment based on a `List or Column of Periodic Cash Flows` and a `Discount Rate`.",
    "metadata": { "source": "docs/formulas/formulas-for-finance.md" }
  },
  "139": {
    "pageContent": "This formula helps you calculate the `Net Present Value` of an investment based on a `List or Column of Periodic Cash Flows` and a `Discount Rate`.\n\n## Payment Amounts\n\n**Syntax:** `paymentamounts( Rate, Number of Periods, Amount )` <br />\n**Alternative Syntax:** `pmt( Rate, Number of Periods, Amount )`\n\nThis formula helps you calculate the anual `Payment Amount` of a loan based on the borrowed `Amount`, the `Number of Periods` of repayment and a constant interest `Rate`.",
    "metadata": { "source": "docs/formulas/formulas-for-finance.md" }
  },
  "140": {
    "pageContent": "---\nsidebar_position: 16\n---\n\n# Formulas for Booleans\n\nBuilt-in formulas that operate on booleans:\n\n## not\n\nThis operator negates a boolean:\n\n```deci live\nnot true\n==> false\n```\n\n## and\n\nThis binary operator takes two booleans and results `true` if and only if both arguments are true:\n\n```deci live\nCanTravel = true\nCanAffordTravelling = false\nWillTravel = CanTravel and CanAffordTravelling\n==> false\n```\n\n## or\n\nThis binary operator takes two booleans and results `false` if and only if both arguments are false:\n\n```deci live\nOnVacation = false\nSick = true\nShouldSkipWork = OnVacation or Sick\n==> true\n```",
    "metadata": { "source": "docs/formulas/formulas-for-booleans.md" }
  },
  "141": {
    "pageContent": "---\nsidebar_position: 11\n---\n\n# Formulas for Tables\n\nBuilt-in functions that operate on tables.\n\n## Table lookups - lookup()\n\nThe `lookup()` formula lets you access rows and values from a table to inspect or reuse.\n\n**Syntax:** `lookup( Table, Table Column Condition )`\n\n- **Table** specifies your target table.\n- **Table Column Condition** defines a searching condition to match.\n\nLet's explore an example where we select the **Rent Amount** from the `Expenses` table.\n\n![lookup](./img/lookup0.png)\n\n### 1. Select a table row\n\n**To select a table row**, use the formula `lookup()` on a calculation block, where you specify the table name on the first parameter and the condition to search on the second one.\n\n![lookup](./img/lookup0.png)\n![lookup](./img/lookup2.png)\n\n- In the first parameter specify the table name. In this example, the table `Expenses`.\n- In the second parameter specify a condition to match the table column. In this example, the row where `Expenses.Item` is equal to `\"Rent\"`.",
    "metadata": { "source": "docs/formulas/formulas-for-tables.md" }
  },
  "142": {
    "pageContent": "### 2. Select a value from a row\n\n**To select a value from a row**, add a dot `.` at the end of the formula `lookup()` with the name of the column you want to select.\n\n![lookup](./img/lookup3.png)\n\nOn this example we specify `.Amount` to select `$1,500`.\n\n## Filter a table - filter()\n\nThe `filter()` formula lets you filter the values from a table.\n\n**Syntax:** `filter( Table, Table Column Condition )`\n\n- **Table** specifies your target table.\n- **Table Column Condition** defines a searching condition to match.\n\n![lookup](./img/filter1.png)\n![lookup](./img/filter0.png)\n\nIn this example, two rows are returned, since both match `Expense.Amount` less or equal to `$500`.\n\n## Reorder table rows\n\n### Sort table rows by column - sortby()\n\nThe `sortby()` formula lets you reorder table rows based on any column.\n\n**Syntax:** `sorby( Table, Table Column )`\n\n- **Table** specifies your target table.\n- **Table Column** defines the column.\n\n![lookup](./img/filter1.png)\n![lookup](./img/sortby0.png)",
    "metadata": { "source": "docs/formulas/formulas-for-tables.md" }
  },
  "143": {
    "pageContent": "**Syntax:** `sorby( Table, Table Column )`\n\n- **Table** specifies your target table.\n- **Table Column** defines the column.\n\n![lookup](./img/filter1.png)\n![lookup](./img/sortby0.png)\n\nNotice how in this example, the returned table has its rows ordered by `Expenses.Item`.\n\n### Reverse table rows order - reverse()\n\nThe `reverse()` formula reverts the order of your table rows.\n\n**Syntax:** `reverse( Table)`\n\n- **Table** specifies the table to revert.\n\n![lookup](./img/filter1.png)\n![lookup](./img/reverse0.png)\n\nNotice how in this example, the returned table has its rows order reversed, compared to the original table.",
    "metadata": { "source": "docs/formulas/formulas-for-tables.md" }
  },
  "144": {
    "pageContent": "---\nsidebar_position: 100\n---\n\n# Define a Range\n\nA range is all the numbers between two numbers. Let's see how you can work with ranges.\n\n## Create a range\n\nYou can declare a range by typing `range(start .. end)` like this:\n\n```deci live\nrange(1 .. 10)\n==> range(1 to 10)\n```\n\nIf you prefer, you can also type a range as `range(start through end)`, or `range(start to end)`:\n\n```deci live\nrange(5 through 20)\nrange(1 to 37)\n==> range(1 to 37)\n```\n\n## Contains\n\nMuch like dates, you can also as to whether a certain range contains a number:\n\n```deci live\nRange = range(1 .. 10)\nRange contains 5\n==> true\n```\n\nNote that a range contains _every_ number between two numbers, so this should be true:\n\n```deci live\nRange = range(1.4 .. 9.5)\nRange contains 5.72832\n==> true\n```\n\n## Units in ranges\n\nMuch like a number, a range can have a unit:\n\n```deci live\nrange(10 .. 30 oranges)\n==> range(10 oranges to 30 oranges)\n```\n\n## Ranges of dates\n\nYou can have ranges of dates, like this:",
    "metadata": { "source": "docs/advanced-concepts/ranges.md" }
  },
  "145": {
    "pageContent": "## Units in ranges\n\nMuch like a number, a range can have a unit:\n\n```deci live\nrange(10 .. 30 oranges)\n==> range(10 oranges to 30 oranges)\n```\n\n## Ranges of dates\n\nYou can have ranges of dates, like this:\n\n```deci live\nrange(date(2022-01) through date(2022-06))\n==> range(month 2022-01 to month 2022-06)\n```",
    "metadata": { "source": "docs/advanced-concepts/ranges.md" }
  },
  "146": {
    "pageContent": "---\nsidebar_position: 310\n---\n\n# Define a Dimension\n\nA dimension is a characteristic of an object that can be given different values. For example, a geographic location could have dimensions called latitude, longitude, or country.\n\nIn this example you get quotes to refurbish your kitchen:\n\n```deci live\nQuote = {\n  Name = [\"Bhakta Construction\", \"Precido Builders\", \"MBD Firm\"],\n  Price = [750 £/sqft, 900 £/sqft, 435 £/sqft]\n}\n==> {\n  Name = [ 'Bhakta Construction', 'Precido Builders', 'MBD Firm' ],\n  Price = [ 750 £/ft², 900 £/ft², 435 £/ft² ]\n}\n```\n\nThe final price will depend on how big the kitchen is:\n\n```deci live\nJob = {\n  Name = [\"Small\", \"Medium\", \"Large\"],\n  Size = [10 sqft, 15 sqft, 25 sqft]\n}\n==> {\n  Name = [ 'Small', 'Medium', 'Large' ],\n  Size = [ 10 ft², 15 ft², 25 ft² ]\n}\n```\n\nYou can now calculate quotes:",
    "metadata": { "source": "docs/advanced-concepts/dimensions.md" }
  },
  "147": {
    "pageContent": "You can now calculate quotes:\n\n```deci live\nQuote = {\n  Name = [\"Bhakta Construction\", \"Precido Builders\", \"MBD Firm\"],\n  Price = [750 gbp/sqft, 900 gbp/sqft, 435 gbp/sqft]\n}\nJob = {\n  Name = [\"Small\", \"Medium\", \"Large\"],\n  Size = [10 sqft, 15 sqft, 25 sqft]\n}\nQuote.Price * Job.Size\n==> [ [ 7500 £, 11250 £, 18750 £ ], [ 9000 £, 13500 £, 22500 £ ], [ 4350 £, 6525 £, 10875 £ ] ]\n```\n\nUsing dimensions has two main advantages:\n\n1.  You will be able to add and remove characteristics without breaking your notebook\n2.  In the future, you will be able to re-use dimensions across your notebooks\n\n### Converting Units\n\nJust like everywhere in Decipad you can convert units:\n\n```deci live\nQuote = {\n  Name = [\"Bhakta Construction\", \"Precido Builders\", \"MBD Firm\"],\n  Price = [750 £/sqft, 900 £/sqft, 435 £/sqft]\n}",
    "metadata": { "source": "docs/advanced-concepts/dimensions.md" }
  },
  "148": {
    "pageContent": "Just like everywhere in Decipad you can convert units:\n\n```deci live\nQuote = {\n  Name = [\"Bhakta Construction\", \"Precido Builders\", \"MBD Firm\"],\n  Price = [750 £/sqft, 900 £/sqft, 435 £/sqft]\n}\n\nInMeters = {\n  Name = Quote.Name,\n  Price = ceil(Quote.Price in £/meter^2)\n}\n==> {\n  Name = [ 'Bhakta Construction', 'Precido Builders', 'MBD Firm' ],\n  Price = [ 8073 £·meter⁻², 9688 £·meter⁻², 4683 £·meter⁻² ]\n}\n```\n\n### Supported units\n\n[Here is a list of all the units Decipad knows](/docs/basic-concepts/supported-units).\n\n## Degrees of freedom\n\nAny quantity has a defined number of degrees of freedom.\n\nThe space of numbers has _one_ degree of freedom. They can vary from -Infinity to +Infinity:\n\n![One dimension axis](/img/dimensions-one-axis.svg)\n\nBut once you define a numeric value, they have 0 dimensions, since they can no longer vary. For instance, if you create a value of `3 oranges`, _that_ value of oranges has 0 degrees of freedom; it cannot change.\n\n![Dimensions three](/img/dimensions-three.svg)",
    "metadata": { "source": "docs/advanced-concepts/dimensions.md" }
  },
  "149": {
    "pageContent": "![Dimensions three](/img/dimensions-three.svg)\n\n## One degree of freedom\n\nYou can define a 1-dimensional value by creating a table with at least two columns.\nIn the first column you place a name, and in the second column you place a value, like this:\n\n```deci live\nCars = {\n  Type = [\"suv\", \"hybrid\", \"standard\"],\n  FuelConsumption = [ 23 miles/gallon, 45 miles/gallon, 28 miles/gallon]\n}\n==> {\n  Type = [ 'suv', 'hybrid', 'standard' ],\n  FuelConsumption = [ 23 miles per gallon, 45 miles per gallon, 28 miles per gallon ]\n}\n```\n\nIn the previous example, the column named `FuelConsumption` is indexed by `Type`. You can access the fuel consumption values using the `.` character like this:\n\n```deci live\nCars = {\n  Type = [\"suv\", \"hybrid\", \"standard\"],\n  FuelConsumption = [ 23 miles/gallon, 45 miles/gallon, 28 miles/gallon]\n}\n\nCars.FuelConsumption\n==> [ 23 miles per gallon, 45 miles per gallon, 28 miles per gallon ]\n```",
    "metadata": { "source": "docs/advanced-concepts/dimensions.md" }
  },
  "150": {
    "pageContent": "Cars.FuelConsumption\n==> [ 23 miles per gallon, 45 miles per gallon, 28 miles per gallon ]\n```\n\nThis column (`Cars.FuelConsumption`) is a one-dimensional value. Given an index value, it can have, in this case, one of three values (23, 45 or 28 miles per gallon).\n\n## Two degrees of freedom\n\nWe can also declare a time value that also has one degree of freedom that is a sequence of years:\n\n```deci live\nYear = [date(2020) .. date(2025) by year]\n==> [ year 2020, year 2021, year 2022, year 2023, year 2024, year 2025 ]\n```\n\nWhich we now can use to calculate an interest rate and the price of fuel per year:\n\n```deci live\nYear = [date(2020) .. date(2025) by year]\n\nBaseFuelPrice = 4 USD/gallon",
    "metadata": { "source": "docs/advanced-concepts/dimensions.md" }
  },
  "151": {
    "pageContent": "Which we now can use to calculate an interest rate and the price of fuel per year:\n\n```deci live\nYear = [date(2020) .. date(2025) by year]\n\nBaseFuelPrice = 4 USD/gallon\n\nFuel = {\n  Year,\n  InterestRateFromYear = 1.08 ** (Year - date(2020) as years),\n  Price = round(BaseFuelPrice * InterestRateFromYear, 2)\n}\n==> {\n  Year = [ year 2020, year 2021, year 2022, year 2023, year 2024, year 2025 ],\n  InterestRateFromYear = [ 1, 1.08, 1.1664, 1.2597, 1.3604, 1.4693 ],\n  Price = [ 4 $ per gallon, 4.32 $ per gallon, 4.67 $ per gallon, 5.04 $ per gallon, 5.44 $ per gallon, 5.88 $ per gallon ]\n}\n```\n\nWe can now relate both `Cars.FuelConsumption` and `Fuel.Price` to know how many dollars you need to spend to travel one mile:\n\n```deci live\nCars = {\n  Type = [\"suv\", \"hybrid\", \"standard\"],\n  FuelConsumption = [ 23 miles/gallon, 45 miles/gallon, 28 miles/gallon]\n}\n\nYear = [date(2020) .. date(2025) by year]\n\nBaseFuelPrice = 4 USD/gallon",
    "metadata": { "source": "docs/advanced-concepts/dimensions.md" }
  },
  "152": {
    "pageContent": "Year = [date(2020) .. date(2025) by year]\n\nBaseFuelPrice = 4 USD/gallon\n\nFuel = {\n  Year,\n  InterestRateFromYear = 1.08 ** (Year - date(2020) as years),\n  Price = round(BaseFuelPrice * InterestRateFromYear, 2)\n}\n\nround(Fuel.Price / Cars.FuelConsumption, 2)\n==> [ [ 0.17 $ per mile, 0.09 $ per mile, 0.14 $ per mile ], [ 0.19 $ per mile, 0.1 $ per mile, 0.15 $ per mile ], [ 0.2 $ per mile, 0.1 $ per mile, 0.17 $ per mile ], [ 0.22 $ per mile, 0.11 $ per mile, 0.18 $ per mile ], [ 0.24 $ per mile, 0.12 $ per mile, 0.19 $ per mile ], [ 0.26 $ per mile, 0.13 $ per mile, 0.21 $ per mile ] ]\n```\n\n## The over directive\n\nIf you find that your values have too many degrees of freedom, you might want to generalize a bit. For example, by using the `total` function:\n\n```deci live\nCars = {\n  Type = [\"suv\", \"hybrid\", \"standard\"],\n  FuelConsumption = [ 23 miles/gallon, 45 miles/gallon, 28 miles/gallon]\n}\n\nBaseFuelPrice = 4 USD/gallon",
    "metadata": { "source": "docs/advanced-concepts/dimensions.md" }
  },
  "153": {
    "pageContent": "```deci live\nCars = {\n  Type = [\"suv\", \"hybrid\", \"standard\"],\n  FuelConsumption = [ 23 miles/gallon, 45 miles/gallon, 28 miles/gallon]\n}\n\nBaseFuelPrice = 4 USD/gallon\n\nFuel = {\n  Year = [date(2020) .. date(2025) by year],\n  InterestRateFromYear = 1.08 ** (Year - date(2020) as years),\n  Price = round(BaseFuelPrice * InterestRateFromYear, 2)\n}\n\nEstimatedUsage = 100000 miles\n\nGallonsSpent = (1 / Cars.FuelConsumption) * EstimatedUsage\nDollarsSpentPerYear = round(Fuel.Price * GallonsSpent)\n\ntotal(DollarsSpentPerYear)\n==> [ 40566 $, 43812 $, 47361 $, 51113 $, 55170 $, 59632 $ ]\n```\n\nThis should display the total on a per-year basis. This is because `Consumption`'s first degree of freedom is based on the Fuel table. But this doesn't make sense for us unless we're going to buy all 3 cars.\n\nWe want to know how much we would spend per car in this time period. To do so, we need to replace the last line with `total(DollarsSpentPerYear over Cars)`, meaning it would calculate the total per car.",
    "metadata": { "source": "docs/advanced-concepts/dimensions.md" }
  },
  "154": {
    "pageContent": "```deci live\nCars = {\n  Type = [\"suv\", \"hybrid\", \"standard\"],\n  FuelConsumption = [ 23 miles/gallon, 45 miles/gallon, 28 miles/gallon]\n}\n\nBaseFuelPrice = 4 USD/gallon\n\nFuel = {\n  Year = [date(2020) .. date(2025) by year],\n  InterestRateFromYear = 1.08 ** (Year - date(2020) as years),\n  Price = round(BaseFuelPrice * InterestRateFromYear, 2)\n}\n\nEstimatedUsage = 100000 miles\n\nGallonsSpent = (1 / Cars.FuelConsumption) * EstimatedUsage\nDollarsSpentPerYear = round(Fuel.Price * GallonsSpent)\n\ntotal(DollarsSpentPerYear over Cars)\n==> [ 127608 $, 65223 $, 104823 $ ]\n```\n\n## Another example of dimensions combined with unit conversions\n\nWe can have operations and unit conversions work accross dimensions, like in this example where we show how long each animal would take to run 1.75 marathons:\n\n```deci live\nAnimals = {\n  Name = [\"Person\", \"Falcon\", \"Turtle\"]\n  Speed = [27.33 mph, 55 mph, 22 mph]\n}\n\nRace = {\n  Name = [\"Quarter\", \"Half\", \"Marathon\"]\n  Distance = [0.25 marathon, 0.5 marathon, 1 marathon]\n}",
    "metadata": { "source": "docs/advanced-concepts/dimensions.md" }
  },
  "155": {
    "pageContent": "Hours = sum(Race.Distance / Animals.Speed over Animals) in hours",
    "metadata": { "source": "docs/advanced-concepts/dimensions.md" }
  },
  "156": {
    "pageContent": "==> [ 1.6788 hours, 0.834233(191796273399709333853929415847812411878267282705364308800242944838506756903320969176373614455217891152035747597665994230060085464523546126982061126656688575085139150994555432637036072970217565779484176048241903646341727945163879308474870393266957332812737250818854254788399383961302357866423721828159909763345697490293052211448775514630919069000672436606581202143120539684605540009978091581527515672111234029630593696449100887182490618424763020324938721502787358) hours, 2.0855829(794906834992733346348235396195310296956682067634107720006073620962668922583024229409340361380447278800893689941649855751502136613088653174551528166417214377128478774863885815925901824255439144487104401206047591158543198629096982711871759831673933320318431270471356369709984599032558946660593045703997744083642437257326305286219387865772976725016810915164530053578013492115138500249452289538187891802780850740764842411227522179562265460619075508123468037569683954) hours ]\n```",
    "metadata": { "source": "docs/advanced-concepts/dimensions.md" }
  },
  "157": {
    "pageContent": "> **Challenge**: Try tweaking the units above to see how many seconds or days it takes for each animal to complete all three races.",
    "metadata": { "source": "docs/advanced-concepts/dimensions.md" }
  },
  "158": {
    "pageContent": "---\nsidebar_position: 110\n---\n\n# Define a Sequence\n\nIn Decipad, a sequence is a list of quantities separated by a step.\n\n## Creating a sequence\n\nYou can create a sequence by typing `[start .. end by step]` like this:\n\n```deci live\n[1 .. 5 by 1]\n==> [ 1, 2, 3, 4, 5 ]\n```\n\n> As you can see, in Decipad, sequences can be expressed similarly to ranges, but adding a `by step`.\n\n## Sequences with units\n\n```deci live\n[0 through 6 miles by 2]\n==> [ 0 miles, 2 miles, 4 miles, 6 miles ]\n```\n\n## Date sequences\n\nYou can have sequences of dates by specifying the step:\n\n```deci live\n[date(2021-01) .. date(2021-06) by month]\n==> [ month 2021-01, month 2021-02, month 2021-03, month 2021-04, month 2021-05, month 2021-06 ]\n```\n\nThe step can be any of `millennium`, `century`, `decade`, `year`, `quarter`, `month`, `day`, `hour`, `minute`, `second` or `millisecond`:",
    "metadata": { "source": "docs/advanced-concepts/sequences.md" }
  },
  "159": {
    "pageContent": "The step can be any of `millennium`, `century`, `decade`, `year`, `quarter`, `month`, `day`, `hour`, `minute`, `second` or `millisecond`:\n\n```deci live\n[date(2021-03-15) .. date(2021-03-15) by hour]\n==> [ hour 2021-03-15 00:00, hour 2021-03-15 01:00, hour 2021-03-15 02:00, hour 2021-03-15 03:00, hour 2021-03-15 04:00, hour 2021-03-15 05:00, hour 2021-03-15 06:00, hour 2021-03-15 07:00, hour 2021-03-15 08:00, hour 2021-03-15 09:00, hour 2021-03-15 10:00, hour 2021-03-15 11:00, hour 2021-03-15 12:00, hour 2021-03-15 13:00, hour 2021-03-15 14:00, hour 2021-03-15 15:00, hour 2021-03-15 16:00, hour 2021-03-15 17:00, hour 2021-03-15 18:00, hour 2021-03-15 19:00, hour 2021-03-15 20:00, hour 2021-03-15 21:00, hour 2021-03-15 22:00, hour 2021-03-15 23:00 ]\n```\n\n## Functions on lists\n\n[Here is a list of all the functions that work on lists](/docs/formulas/formulas-for-lists).",
    "metadata": { "source": "docs/advanced-concepts/sequences.md" }
  },
  "160": {
    "pageContent": "---\nsidebar_position: 430\ndraft: true\n---\n\n# Referece a Previous Result\n\nIf you want to do a calculation that requires many steps, you may wish to break down those steps into separate statements. To achieve that, you can store intermediary values on variables, like this:\n\n```deci live\nSquareSide = 10 centimeters\nSquareArea = SquareSide ** 2\nPressure = 3 kiloNewton / SquareArea\nPressure in bars\n==> 3 bars\n```\n\nInstead, Deci language stores the previous value in a variable called `_`, which you can use instead:\n\n```deci live\n10 centimeter\n_ ** 2\n3 kiloNewton / _\nPressure = _ in bars\n==> 3 bars\n```\n\n> The resulting code will probably be less readable, but avoids you having to imagine and type temporary variable names.",
    "metadata": { "source": "docs/advanced-concepts/previous.md" }
  },
  "161": {
    "pageContent": "---\nsidebar_position: 120\n---\n\n# Define a Time Interval\n\n## What they are\n\nYou can calculate a time interval between two dates:\n\n```deci live\ndate(2020-02-23) - date(2020-01-12)\n==> 42 days\n```\n\nYou can then convert a time interval to, let's say, hours:\n\n```deci live\ndate(2020-02-23 17:35) - date(2020-01-12 05:23) as hours\n==> 1020.2 hours\n```\n\nor minutes:\n\n```deci live\ndate(2020-02-23 17:35) - date(2020-01-12 05:23) as minutes\n==> 61212 minutes\n```\n\nor seconds:\n\n```deci live\ndate(2020-02-23 17:35:43) - date(2020-01-12 05:23:12) as seconds\n==> 3672751 seconds\n```\n\nor milliseconds:\n\n```deci live\ndate(2020-02-23 17:35:43) - date(2020-01-12 05:23:12) as milliseconds\n==> 3672751000 milliseconds\n```\n\n## Functions on dates\n\n[Here is a list of all the functions that work on dates](/docs/formulas/formulas-for-dates).",
    "metadata": { "source": "docs/advanced-concepts/time-intervals.md" }
  }
}
